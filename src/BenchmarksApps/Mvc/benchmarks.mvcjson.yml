# Examples:
# --config benchmarks.mvcjson.yml --scenario MvcJson2k --profile aspnet-perf-lin

imports:
- https://raw.githubusercontent.com/dotnet/crank/main/src/Microsoft.Crank.Jobs.Wrk/wrk.yml
- https://raw.githubusercontent.com/dotnet/crank/master/src/Microsoft.Crank.Jobs.Bombardier/bombardier.yml
- https://raw.githubusercontent.com/aspnet/Benchmarks/main/src/BenchmarksApps/Mvc/mvcserver.yml
- https://github.com/aspnet/Benchmarks/blob/main/scenarios/aspnet.profiles.yml?raw=true

variables:
    serverPort: 5000
    
scenarios:
  # Hello world JSON output
  MvcJson:
    application:
      job: mvcServer
    load:
      job: wrk
      variables:
        path: /json-helloworld

  # Hello world JSON output using Newtonsoft.Json
  MvcJsonNet:
    application:
      job: mvcServer
      variables:
        useNewtonsoftJson: true
    load:
      job: wrk
      variables:
        path: /json-helloworld

  # ~2k Json output
  MvcJson2k:
    application:
      job: mvcServer
    load:
      job: wrk
      variables:
        path: /json2k

  # ~2k Json output (Newtonsoft.Json)
  MvcJsonNet2k:
    application:
      job: mvcServer
      variables:
        useNewtonsoftJson: true
    load:
      job: wrk
      variables:
        path: /json2k

  # 60k json output.
  MvcJsonOutput60k:
    application:
      job: mvcServer
    load:
      job: wrk
      variables:
        path: /jsonNbytes/60000

  # 60k json output.
  MvcJsonNetOutput60k:
    application:
      job: mvcServer
      variables:
        useNewtonsoftJson: true
    load:
      job: wrk
      variables:
        path: /jsonNbytes/60000

  # 2M json output
  MvcJsonOutput2M:
    application:
      job: mvcServer
    load:
      job: wrk
      variables:
        path: /jsonNbytes/2097152
        connections: 4
        threads: 4

  # 2M json output (Newtonsoft.Json)
  MvcJsonNetOutput2M:
    application:
      job: mvcServer
      variables:
        useNewtonsoftJson: true
    load:
      job: wrk
      variables:
        path: /jsonNbytes/2097152
        connections: 4
        threads: 4

  # Sending 2k Json to Mvc
  MvcJsonInput2k:
    application:
      job: mvcServer
    load:
      job: wrk
      variables:
        path: /JsonInput
        script: https://raw.githubusercontent.com/aspnet/Benchmarks/main/scripts/mvcjsoninput.lua

  # Sending 2k Json to Mvc (Json.NET)
  MvcJsonNetInput2k:
    application:
      job: mvcServer
      variables:
        useNewtonsoftJson: true
    load:
      job: wrk
      variables:
        path: /JsonInput
        script: https://raw.githubusercontent.com/aspnet/Benchmarks/main/scripts/mvcjsoninput.lua

  # Sending 60k Json to Mvc
  MvcJsonInput60k:
    application:
      job: mvcServer
    load:
      job: wrk
      variables:
        path: /JsonInput
        script: https://raw.githubusercontent.com/aspnet/Benchmarks/main/scripts/mvcjsoninput.lua
        scriptArguments: 60000

  # Sending 60k Json to Mvc (Json.NET)
  MvcJsonNetInput60k:
    application:
      job: mvcServer
      variables:
        useNewtonsoftJson: true
    load:
      job: wrk
      variables:
        path: /JsonInput
        script: https://raw.githubusercontent.com/aspnet/Benchmarks/main/scripts/mvcjsoninput.lua
        scriptArguments: 60000

  # 2M json output
  MvcJsonInput2M:
    application:
      job: mvcServer
    load:
      job: wrk
      variables:
        path: /JsonInput
        script: https://raw.githubusercontent.com/aspnet/Benchmarks/main/scripts/mvcjsoninput.lua
        scriptArguments: 2097152
        connections: 4
        threads: 4

  # 2M json output (Json.NET)
  MvcJsonNetInput2M:
    application:
      job: mvcServer
      variables:
        useNewtonsoftJson: true
    load:
      job: wrk
      variables:
        path: /JsonInput
        script: https://raw.githubusercontent.com/aspnet/Benchmarks/main/scripts/mvcjsoninput.lua
        scriptArguments: 2097152
        connections: 4
        threads: 4

  # MapAction Echo { "Id": 42, "Name": "Write benchmarks!", "IsComplete": false }
  MapActionEchoTodo:
    application:
      job: mapaction
    load:
      job: bombardier
      variables:
        verb: POST
        headers:
          jsonInput: '--header "content-type: application/json"'
        presetHeaders: 'jsonInput'
        path: /EchoTodo
        bodyFile: https://raw.githubusercontent.com/aspnet/Benchmarks/main/scenarios/assets/todo.json

  # MapAction EchoForm
  MapActionEchoTodoForm:
    application:
      job: mapaction
    load:
      job: bombardier
      variables:
        verb: POST
        headers:
          content-type: application/x-www-form-urlencoded
          form-data:
          - name: Id
            value: 1
          - name: Name
            value: Write tests
          - name: IsComplete
            value: false
        path: /EchoTodoForm