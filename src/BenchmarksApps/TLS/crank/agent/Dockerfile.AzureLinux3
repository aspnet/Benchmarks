FROM mcr.microsoft.com/dotnet/sdk:8.0-azurelinux3.0 AS build-env

COPY . .

ENV DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1
ENV DOTNET_CLI_TELEMETRY_OPTOUT=1

# Build self contained
RUN dotnet publish -c Release src/Microsoft.Crank.Agent --output /app --framework net8.0

# Build runtime image
# FROM mcr.microsoft.com/dotnet/aspnet:8.0
# Use SDK image as it is required for the dotnet tools
FROM mcr.microsoft.com/dotnet/sdk:8.0-azurelinux3.0

ARG CPUNAME=x86_64
ARG ENABLE_FIPS_MODE=false
ARG OPENSSL_CIPHER_STRING=TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256
ARG OPENSSL_GROUPS=P-384:P-256:P-521

# Install dotnet-symbols
RUN dotnet tool install -g dotnet-symbol
ENV PATH="${PATH}:/root/.dotnet/tools"

# Install dependencies
RUN tdnf update -y \
    && tdnf install -y \
        git \
        procps-ng \
        curl \
        wget \
        libcgroup \
        libcgroup-tools \
        # dotnet performance repo microbenchmark dependencies
        libgdiplus \
        # libmsquic requirements
        gnupg2 \
        # NativeAOT requirements
        clang \
        zlib-devel \
        krb5-devel \
        # .NET 9.0 requirement
        glibc

# Install HTTP/3 support
RUN tdnf install -y libmsquic

# Build and install h2load. Required as there isn't a way to distribute h2load as a single file to download
RUN tdnf install -y \
        gcc-c++ make binutils autoconf automake libtool pkg-config \
        zlib-devel cunit-devel libxml2-devel libev-devel libevent-devel jansson-devel \
        c-ares-devel jemalloc-devel systemd-devel \
        python3-devel python3-setuptools

# ENV OPENSSL_VERSION=3.3.3 Version pinning does not work the same way in AL3 as it does in Debian/Ubuntu. Cannot use * in version, so we will use the latest version available in the repository.
RUN tdnf install -y \
        openssl openssl-devel \
    && tdnf clean all

# Configure OpenSSL for FIPS-compliant cipher suites if $ENABLE_FIPS_MODE
RUN if [ "$ENABLE_FIPS_MODE" = "true" ]; then \
        echo "=== FIPS MODE ENABLED - Configuring OpenSSL ===" && \
        cat /etc/pki/tls/openssl.cnf && \
        echo "" >> /etc/pki/tls/openssl.cnf && \
        echo "openssl_conf = openssl_init" >> /etc/pki/tls/openssl.cnf && \
        echo "[openssl_init]" >> /etc/pki/tls/openssl.cnf && \
        echo "ssl_conf = ssl_sect" >> /etc/pki/tls/openssl.cnf && \
        echo "[ssl_sect]" >> /etc/pki/tls/openssl.cnf && \
        echo "system_default = system_default_sect" >> /etc/pki/tls/openssl.cnf && \
        echo "[system_default_sect]" >> /etc/pki/tls/openssl.cnf && \
        echo "CipherString = $OPENSSL_CIPHER_STRING" >> /etc/pki/tls/openssl.cnf && \
        echo "Groups = $OPENSSL_GROUPS" >> /etc/pki/tls/openssl.cnf && \
        echo "=== FIPS Configuration Applied ===" && \
        tail -15 /etc/pki/tls/openssl.cnf; \
    else \
        echo "=== FIPS MODE DISABLED ==="; \
    fi

# If nghttp2 build fail just ignore it
ENV NGHTTP2_VERSION=1.58.0
RUN tdnf install -y \
        glibc-devel gawk kernel-headers
        
RUN cd /tmp \
    && curl -L "https://github.com/nghttp2/nghttp2/releases/download/v${NGHTTP2_VERSION}/nghttp2-${NGHTTP2_VERSION}.tar.gz" -o "nghttp2-${NGHTTP2_VERSION}.tar.gz" \
    && tar -zxvf "nghttp2-${NGHTTP2_VERSION}.tar.gz" \
    && cd /tmp/nghttp2-$NGHTTP2_VERSION \
    && ./configure \
    && make \
    && make install || true

# Install docker client
ENV DOCKER_VERSION=17.09.0-ce
RUN cd /tmp \
    && curl "https://download.docker.com/linux/static/stable/${CPUNAME}/docker-${DOCKER_VERSION}.tgz" -o docker.tgz \
    && tar xvzf docker.tgz \
    && cp docker/docker /usr/bin \
    && rm -rf docker.tgz docker

# Install perfcollect
ADD https://raw.githubusercontent.com/microsoft/perfview/main/src/perfcollect/perfcollect /usr/bin/perfcollect
RUN chmod +x /usr/bin/perfcollect
RUN /usr/bin/perfcollect install

COPY --from=build-env /app /app

ENTRYPOINT [ "/app/crank-agent" ]
