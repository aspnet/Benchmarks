# Do not change this file, it is generated using these steps:
# - The file benchmarks*.json defines how each pipeline set of jobs is run in parallel
# - Update the associated benchmarks*.json file with machine and scenario updates
# - Install python and install the requirements for the crank-scheduler in benchmarks/scripts/crank-scheduler/requirements.txt
# - Run the scheduler specifying the desired benchmarks*.json file, this template, and benchmarks/output to automatically overwrite the current pipeline.
# - Ex. python ./scripts/crank-scheduler/main.py --config ./build/benchmarks_ci.json --template ./build/benchmarks.template.liquid --yaml-output ./build

{%- assign defaultTimeout = 120 %}

trigger: none
pr: none

schedules:
- cron: "{{ schedule }}"
  always: true # always run the pipeline even if there have not been source code changes since the last successful scheduled run.
  branches:
    include:
    - main

variables:
  - template: job-variables.yml
  - name: session
    value: $(Build.BuildNumber)
  - name: buildId
    value: $(Build.BuildId)
  - name: buildNumber
    value: $(Build.BuildNumber)
  - name: am
    value: $[lt(format('{0:HH}', pipeline.startTime), 12)]
  - name: pm
    value: $[ge(format('{0:HH}', pipeline.startTime), 12)]

jobs:

{% for group in groups -%}
{% assign n = forloop.index -%}
# GROUP {{ n }}

{% for job in group.jobs -%}
- job: {{job.name | replace: ' ', '_'}}
  displayName: {{ n }}- {{job.name}}
  pool: server
  timeoutInMinutes: {{ job.timeout | default: defaultTimeout }}
  dependsOn: [{%for previousJob in previousGroup.jobs%}{{previousJob.name | replace: ' ', '_'}}{%if forloop.last == false%}, {%endif%}{%endfor%}]
  condition: succeededOrFailed()
  steps:
  - template: {{job.template}}
    parameters:
      connection: ASPNET Benchmarks Service Bus
      serviceBusQueueName: {{queues[forloop.index0]}}
      serviceBusNamespace: aspnetbenchmarks
      arguments: "$(ciProfile) {%for p in job.profiles%}--profile {{p}} {% endfor %}"
      
{% endfor %}
{%-assign previousGroup = group -%}
{% endfor %}