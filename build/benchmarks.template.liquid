# Do not change this file, it is generated using these steps:
# - The file benchmarks.matrix.yml defines how each job is run in parallel
# - Convert its content to json using https://jsonformatter.org/yaml-to-json
# - Use the template in benchmarks.template.liquid and the converted json using https://liquidjs.com/playground.html
# - Update this file with the result of the template generation

{%- assign defaultTimeout = 120 %}

trigger: none
pr: none

schedules:
- cron: "{{ schedule }}"
  always: true # always run the pipeline even if there have not been source code changes since the last successful scheduled run.
  branches:
    include:
    - main

variables:
  - template: job-variables.yml
  - name: session
    value: $(Build.BuildNumber)
  - name: buildId
    value: $(Build.BuildId)
  - name: buildNumber
    value: $(Build.BuildNumber)
  - name: am
    value: $[lt(format('{0:HH}', pipeline.startTime), 12)]
  - name: pm
    value: $[ge(format('{0:HH}', pipeline.startTime), 12)]

jobs:

{% for group in groups -%}
{% assign n = forloop.index -%}
# GROUP {{ n }}

{% for job in group.jobs -%}
- job: {{job.name | replace: ' ', '_'}}
  displayName: {{ n }}- {{job.name}}
  pool: server
  timeoutInMinutes: {%if job.timeout == blank%}{{defaultTimeout}}{%else%}{{job.timeout}}{%endif%}
  dependsOn: [{%for previousJob in previousGroup.jobs%}{{previousJob.name | replace: ' ', '_'}}{%if forloop.last == false%}, {%endif%}{%endfor%}]
  condition: succeededOrFailed()
  steps:
  - template: {{job.template}}
    parameters:
      connection: ASPNET Benchmarks Service Bus
      serviceBusQueueName: {{queues[forloop.index0]}}
      serviceBusNamespace: aspnetbenchmarks
      arguments: "$(ciProfile) {%for p in job.profiles%}--profile {{p}} {% endfor %}"
      
{% endfor %}
{%-assign previousGroup = group -%}
{% endfor %}
