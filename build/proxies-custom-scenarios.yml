# Proxy scenarios

parameters:
- name: arguments
  type: string
  default: ''
- name: connection
  type: string
  default: ''
- name: condition
  type: string
  default: '(new Date().getUTCHours() - 7 + 24) % 24 < 13'

- name: proxies 
  type: object
  default: 
  - displayName: Yarp
    arguments: --scenario proxy-yarp $(proxyJobs) --property proxy=yarp-pgo --application.framework net9.0 --application.environmentVariables DOTNET_TieredPGO=1 --application.environmentVariables DOTNET_ReadyToRun=0 --application.environmentVariables DOTNET_TC_QuickJitForLoops=1
    supportsHttp: true
    supportsServerHttps: true
    supportsServerHttp2: true
    supportsDownstreamHttp2: true
    condition: 'true'
  - displayName: Envoy
    arguments: --scenario proxy-envoy $(proxyJobs) --property proxy=envoy
    supportsHttp: true
    supportsServerHttps: true
    supportsServerHttp2: true
    supportsDownstreamHttp2: true
    condition: 'true' # new Date().getDay() % 3 == 0

- name: scenarios
  type: object
  default:
    - displayName: "100KB-https/https-2000rps-4cores"
      arguments: --variable rate=2000 --property rate=2000 --variable path=/?s=102400 --property payload=102400 --property body=0 --property headers=plaintext --application.cpuSet 0-3 --property cpu=4 --property scenario=100KB-https/https-2000rps-4cores
    - displayName: "100KB-https/https-2000rps-8cores"
      arguments: --variable rate=2000 --property rate=2000 --variable path=/?s=102400 --property payload=102400 --property body=0 --property headers=plaintext --application.cpuSet 0-7 --property cpu=8 --property scenario=100KB-https/https-2000rps-8cores

steps:
- ${{ each s in parameters.scenarios }}:
  - ${{ each p in parameters.proxies }}:
    - task: PublishToAzureServiceBus@1
      condition: succeededOrFailed()
      timeoutInMinutes: 10
      displayName: ${{ p.displayName }} ${{ s.displayName }}
      inputs:
        connectedServiceName: ${{ parameters.connection }}
        waitForCompletion: true
        useDataContractSerializer: "false"
        messageBody: |
          {
            "condition": "(${{ parameters.condition }}) && (${{ s.condition }})",
            "timeout": "00:03:00",
            "name": "crank",
            "args": [ "--command-line-property --table ProxyBenchmarks --sql SQL_CONNECTION_STRING --chart --session $(session) ${{ parameters.arguments }} --no-metadata --no-measurements --load.options.reuseBuild true --downstream.options.reuseBuild true ${{ s.arguments }} ${{ p.arguments }} --description \"${{ s.displayName }} ${{ p.displayName }} $(System.JobDisplayName)\" --variable serverScheme=https --variable serverScheme=https --variable downstreamScheme=https --property serverProtocol=https --property downstreamProtocol=https" ]
          }
