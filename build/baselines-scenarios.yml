# baseline scenarios

parameters:
- name: arguments
  type: string
  default: ''
- name: connection
  type: string
  default: ''
- name: condition
  type: string
  default: 'true'

# Baselines
- name: baselines 
  type: object
  default: 
  
  - displayName: "7.0"
    arguments: --application.framework net7.0 --property framework=net7.0

  - displayName: "8.0"
    arguments: --application.framework net8.0 --property framework=net8.0

  - displayName: "9.0"
    arguments: --application.framework net9.0 --property framework=net9.0

# Scenarios
- name: scenarios 
  type: object
  default: 

  # Platform
  - displayName: Plaintext Platform
    arguments: --scenario plaintext $(platformJobs) --property scenario=PlaintextPlatform

  - displayName: Json Platform
    arguments: --scenario json $(platformJobs) --property scenario=JsonPlatform

  # PGO Inline
  - displayName: Plaintext Platform PGO Inline
    arguments: --scenario plaintext $(platformJobs) --property scenario=PlaintextPlatformPgoInline --application.environmentVariables DOTNET_SYSTEM_NET_SOCKETS_INLINE_COMPLETIONS=1 --application.environmentVariables DOTNET_TieredPGO=1 --application.environmentVariables DOTNET_TC_QuickJitForLoops=1 --application.environmentVariables DOTNET_ReadyToRun=0

  - displayName: Json Platform PGO Inline
    arguments: --scenario json $(platformJobs) --property scenario=JsonPlatformPgoInline --application.environmentVariables DOTNET_SYSTEM_NET_SOCKETS_INLINE_COMPLETIONS=1 --application.environmentVariables DOTNET_TieredPGO=1 --application.environmentVariables DOTNET_TC_QuickJitForLoops=1 --application.environmentVariables DOTNET_ReadyToRun=0

  # Plaintext
  - displayName: Plaintext
    arguments: --scenario plaintext $(plaintextJobs) --property scenario=Plaintext

  - displayName: Plaintext endpoint
    arguments: --scenario endpoint $(plaintextJobs) --property scenario=PlaintextEndpoint

  # JSon
  - displayName: Json
    arguments: --scenario json $(jsonJobs) --property scenario=Json

  - displayName: Json Mvc
    arguments: --scenario mvc $(jsonJobs) --property scenario=JsonMvc
  
  # Https
  - displayName: Plaintext Https
    arguments: --scenario https $(plaintextJobs) --property scenario=PlaintextHttps

  - displayName: Json Https
    arguments: --scenario https $(jsonJobs) --property scenario=JsonHttps

  
steps:
- ${{ each s in parameters.scenarios }}:
  - ${{ each b in parameters.baselines }}:
    - task: PublishToAzureServiceBus@1
      condition: succeededOrFailed()
      timeoutInMinutes: 10
      displayName: "${{ s.displayName }} - ${{ b.displayName }}"
      inputs:
        connectedServiceName: ${{ parameters.connection }}
        waitForCompletion: true
        useDataContractSerializer: "false"
        messageBody: |
          {
            "name": "crank",
            "condition": "(${{ parameters.condition }})",
            "retries": 1,
            "args": [ "${{ s.arguments }} ${{ b.arguments }} ${{ parameters.arguments }} $(azureProfile) --load.options.reuseBuild true --no-metadata --no-measurements --load.options.reuseBuild true --session $(session) --command-line-property --table BaselineBenchmarks --sql SQL_CONNECTION_STRING  --chart" ]
          }
