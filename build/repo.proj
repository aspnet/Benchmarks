<Project DefaultTargets="TestBenchmarks">

  <!-- PARAMETERS 
  
  $(BENCHMARK_SERVER)
  $(BENCHMARK_CLIENT)
  $(PlaintextThreadCount)
  
  -->
  <PropertyGroup>
    <RepositoryRoot Condition="'$(RepositoryRoot)' == ''">$(MSBuildStartupDirectory)</RepositoryRoot>
    <RepositoryRoot>$([MSBuild]::NormalizeDirectory('$(RepositoryRoot)'))</RepositoryRoot>

    <PlaintextThreadCount Condition="'$(PlaintextThreadCount)' == ''">2</PlaintextThreadCount>
    <PlaintextThreadCount>--kestrelThreadCount $(PlaintextThreadCount)</PlaintextThreadCount>

    <PlaintextJobs>-j "$(RepositoryRoot)src/Benchmarks/benchmarks.plaintext.json"</PlaintextJobs>
    <PlaintextPlatformJobs>-j "$(RepositoryRoot)src/PlatformBenchmarks/benchmarks.plaintext.json"</PlaintextPlatformJobs>
    <HtmlJobs>-j "$(RepositoryRoot)src/Benchmarks/benchmarks.html.json"</HtmlJobs>
    <JsonJobs>-j "$(RepositoryRoot)src/Benchmarks/benchmarks.json.json"</JsonJobs>
    <JsonPlatformJobs>-j "$(RepositoryRoot)src/PlatformBenchmarks/benchmarks.json.json"</JsonPlatformJobs>
    <MultiQueryJobs>-j "$(RepositoryRoot)src/Benchmarks/benchmarks.multiquery.json"</MultiQueryJobs>
    <SignalRJobs>-j https://raw.githubusercontent.com/aspnet/SignalR/dev/benchmarks/BenchmarkServer/signalr.json -t SignalR -r signalr --projectFile benchmarks/BenchmarkServer/BenchmarkServer.csproj</SignalRJobs>
  </PropertyGroup>

  <ItemDefinitionGroup>
    <Scenarios>
      <Description>Trend/Latest</Description>
      <AspNetCoreVersion>Latest</AspNetCoreVersion>
      <RuntimeVersion>Latest</RuntimeVersion>
    </Scenarios>
  </ItemDefinitionGroup>
  
  <ItemGroup>

    <!-- Plaintext -->
    <Scenarios Include="-n PlaintextPlatform --webHost KestrelLibuv $(PlaintextThreadCount) $(PlaintextPlatformJobs)" />
    <Scenarios Include="-n PlaintextPlatform --webHost KestrelSockets $(PlaintextPlatformJobs)" />
    <Scenarios Include="-n Plaintext --webHost KestrelLibuv $(PlaintextThreadCount) $(PlaintextJobs)" />
    <Scenarios Include="-n Plaintext --webHost KestrelLibuv $(PlaintextThreadCount) $(PlaintextJobs)" Description="Baseline" AspNetCoreVersion="Current" RuntimeVersion="Current"/>
    <Scenarios Include="-n Plaintext --webHost KestrelSockets $(PlaintextJobs)" />
    <Scenarios Include="-n Plaintext --webHost KestrelSockets $(PlaintextJobs)" Description="Baseline" AspNetCoreVersion="Current" RuntimeVersion="Current"/>
    <Scenarios Include="-n MvcPlaintext --webHost KestrelSockets $(PlaintextJobs)" />
    <Scenarios Include="-n MvcPlaintext --webHost KestrelLibuv $(PlaintextJobs)" />

    <Scenarios Include="-n Plaintext --webHost HttpSys $(PlaintextJobs)" />
    <Scenarios Include="-n Plaintext --webHost KestrelLibuv -f Benchmarks.PassthroughConnectionFilter $(PlaintextJobs)" />
    <Scenarios Include="-n StaticFiles --webHost KestrelLibuv --path plaintext $(PlaintextJobs)" />

    <Scenarios Include="-n JsonPlatform --webHost KestrelSockets $(JsonPlatformJobs)" />
    <Scenarios Include="-n JsonPlatform --webHost KestrelLibuv $(JsonPlatformJobs)" />
    <Scenarios Include="-n Json --webHost KestrelSockets $(JsonJobs)" />
    <Scenarios Include="-n Json --webHost KestrelSockets $(JsonJobs)"  Description="Baseline" AspNetCoreVersion="Current" RuntimeVersion="Current"/>
    <Scenarios Include="-n Json --webHost KestrelLibuv $(JsonJobs)" />
    <Scenarios Include="-n Json --webHost KestrelLibuv $(JsonJobs)" Description="Baseline" AspNetCoreVersion="Current" RuntimeVersion="Current"/>
    <Scenarios Include="-n Jil --webHost KestrelLibuv $(JsonJobs)" />
    <Scenarios Include="-n MvcJson --webHost KestrelSockets $(JsonJobs)" />
    <Scenarios Include="-n MvcJson --webHost KestrelLibuv $(JsonJobs)" />
    <Scenarios Include="-n MvcJil --webHost KestrelLibuv $(JsonJobs)" />

    <!-- Https -->
    <Scenarios Include="-n Plaintext -m https --webHost KestrelSockets $(PlaintextJobs)" />
    <Scenarios Include="-n Plaintext -m https --webHost KestrelLibuv $(PlaintextJobs)" />
    <Scenarios Include="-n Plaintext -m https --webHost HttpSys $(PlaintextJobs)" />
    <Scenarios Include="-n Json -m https --webHost KestrelSockets $(JsonJobs)" />
    <Scenarios Include="-n Json -m https --webHost KestrelLibuv $(JsonJobs)" />
    <Scenarios Include="-n Json -m https --webHost HttpSys $(JsonJobs)" />

    <!-- Caching -->
    <Scenarios Include="-n MemoryCachePlaintext --webHost KestrelLibuv $(PlaintextThreadCount) $(PlaintextJobs)" />
    <Scenarios Include="-n MemoryCachePlaintextSetRemove --webHost KestrelLibuv $(PlaintextThreadCount) $(PlaintextJobs)" />

    <Scenarios Include="-n ResponseCachingPlaintextCached --webHost KestrelLibuv $(PlaintextThreadCount) $(PlaintextJobs)" />
    <Scenarios Include="-n ResponseCachingPlaintextCached --webHost KestrelLibuv $(PlaintextThreadCount) --method DELETE $(PlaintextJobs)" />
    <Scenarios Include="-n ResponseCachingPlaintextResponseNoCache --webHost KestrelLibuv $(PlaintextThreadCount) $(PlaintextJobs)" />
    <Scenarios Include="-n ResponseCachingPlaintextRequestNoCache --webHost KestrelLibuv $(PlaintextThreadCount) $(PlaintextJobs)" />
    <Scenarios Include="-n ResponseCachingPlaintextVaryByCached --webHost KestrelLibuv $(PlaintextThreadCount) $(PlaintextJobs)" />

    <!-- Database SingleQuery -->
    <Scenarios Include="-n DbSingleQueryRaw --webHost KestrelLibuv $(JsonJobs) --database PostgreSql" />
    <Scenarios Include="-n DbSingleQueryDapper --webHost KestrelLibuv $(JsonJobs) --database PostgreSql" />
    <Scenarios Include="-n DbSingleQueryMongoDb --webHost KestrelLibuv $(JsonJobs) --database MongoDb" />
    <Scenarios Include="-n DbSingleQueryEf --webHost KestrelLibuv $(JsonJobs) --database PostgreSql" />
    <Scenarios Include="-n MvcDbSingleQueryRaw --webHost KestrelLibuv $(JsonJobs) --database PostgreSql" />
    <Scenarios Include="-n MvcDbSingleQueryDapper --webHost KestrelLibuv $(JsonJobs) --database PostgreSql" />
    <Scenarios Include="-n MvcDbSingleQueryEf --webHost KestrelLibuv $(JsonJobs) --database PostgreSql" />

    <!-- Database MultiQuery -->
    <Scenarios Include="-n DbMultiQueryRaw --webHost KestrelLibuv $(MultiQueryJobs) --database PostgreSql" />
    <Scenarios Include="-n DbMultiQueryDapper --webHost KestrelLibuv $(MultiQueryJobs) --database PostgreSql" />
    <Scenarios Include="-n DbMultiQueryMongoDb --webHost KestrelLibuv $(MultiQueryJobs) --database MongoDb" />
    <Scenarios Include="-n DbMultiQueryEf --webHost KestrelLibuv $(MultiQueryJobs) --database PostgreSql" />
    <Scenarios Include="-n MvcDbMultiQueryRaw --webHost KestrelLibuv $(MultiQueryJobs) --database PostgreSql" />
    <Scenarios Include="-n MvcDbMultiQueryDapper --webHost KestrelLibuv $(MultiQueryJobs) --database PostgreSql" />
    <Scenarios Include="-n MvcDbMultiQueryEf --webHost KestrelLibuv $(MultiQueryJobs) --database PostgreSql" />

    <!-- Database MultiUpdate -->
    <Scenarios Include="-n DbMultiUpdateRaw --webHost KestrelLibuv $(MultiQueryJobs) --database PostgreSql" />
    <Scenarios Include="-n DbMultiUpdateDapper --webHost KestrelLibuv $(MultiQueryJobs) --database PostgreSql" />
    <Scenarios Include="-n DbMultiUpdateEf --webHost KestrelLibuv $(MultiQueryJobs) --database PostgreSql" />
    <Scenarios Include="-n MvcDbMultiUpdateRaw --webHost KestrelLibuv $(MultiQueryJobs) --database PostgreSql" />
    <Scenarios Include="-n MvcDbMultiUpdateDapper --webHost KestrelLibuv $(MultiQueryJobs) --database PostgreSql" />
    <Scenarios Include="-n MvcDbMultiUpdateEf --webHost KestrelLibuv $(MultiQueryJobs) --database PostgreSql" />

    <!-- Database Fortunes -->
    <Scenarios Include="-n DbFortunesRaw --webHost KestrelLibuv $(HtmlJobs) --database PostgreSql" />
    <Scenarios Include="-n DbFortunesRaw --webHost KestrelLibuv $(HtmlJobs) --database PostgreSql" Description="Baseline" AspNetCoreVersion="Current" RuntimeVersion="Current" />
    <Scenarios Include="-n DbFortunesDapper --webHost KestrelLibuv $(HtmlJobs) --database PostgreSql" />
    <Scenarios Include="-n DbFortunesMongoDb --webHost KestrelLibuv $(HtmlJobs) --database MongoDb" />
    <Scenarios Include="-n DbFortunesEf --webHost KestrelLibuv $(HtmlJobs) --database PostgreSql" />
    <Scenarios Include="-n DbFortunesEf --webHost KestrelLibuv $(HtmlJobs) --database PostgreSql" Description="Baseline" AspNetCoreVersion="Current" RuntimeVersion="Current" />
    <Scenarios Include="-n MvcDbFortunesRaw --webHost KestrelLibuv $(HtmlJobs) --database PostgreSql" />
    <Scenarios Include="-n MvcDbFortunesDapper --webHost KestrelLibuv $(HtmlJobs) --database PostgreSql" />
    <Scenarios Include="-n MvcDbFortunesEf --webHost KestrelLibuv $(HtmlJobs) --database PostgreSql" />

    <!-- SignalR -->
    <Scenarios Include="-n SignalRBroadcast -p TransportType=WebSockets -p HubProtocol=json $(SignalRJobs)" />
    <Scenarios Include="-n SignalRBroadcast -p TransportType=WebSockets -p HubProtocol=messagepack $(SignalRJobs)" />
    <Scenarios Include="-n SignalRBroadcast -p TransportType=ServerSentEvents -p HubProtocol=json $(SignalRJobs)" />
    <Scenarios Include="-n SignalRBroadcast -p TransportType=ServerSentEvents -p HubProtocol=messagepack $(SignalRJobs)" />
    <Scenarios Include="-n SignalRBroadcast -p TransportType=LongPolling -p HubProtocol=json $(SignalRJobs)" />
    <Scenarios Include="-n SignalRBroadcast -p TransportType=LongPolling -p HubProtocol=messagepack $(SignalRJobs)" />
  </ItemGroup>

  <Target Name="TestBenchmarks">
    <MSBuild Projects="$(RepositoryRoot)src\BenchmarksDriver\BenchmarksDriver.csproj" Targets="Restore;Build" Properties="Configuration=$(Configuration)">
      <Output TaskParameter="TargetOutputs" PropertyName="DriverOutputPath" />
    </MSBuild>

    <ItemGroup>
      <RunProjects Include="$(MSBuildProjectFullPath)" Condition="'$(BENCHMARK_SERVER)' != '' AND '$(BENCHMARK_CLIENT)' != ''">
        <AdditionalProperties>
          Scenario=%(Scenarios.Identity);
          Description=%(Scenarios.Description);
          RuntimeVersion=%(Scenarios.RuntimeVersion);
          AspNetCoreVersion=%(Scenarios.AspNetCoreVersion);
          Server=$(BENCHMARK_SERVER);
          Client=$(BENCHMARK_CLIENT);
          DotNetPath=$(DotNetPath);
          DriverOutputPath=$(DriverOutputPath);
          NoBuild=true
        </AdditionalProperties>
      </RunProjects>
    </ItemGroup>

    <!-- All the scenarios are run, even if one fails. When one fails the task will return as errored -->
    <MSBuild Projects="@(RunProjects)" Targets="RunBenchmark" BuildInParallel="false" />
    
  </Target>

  <Target Name="RunBenchmark">
    <PropertyGroup>
      <DotNetPath Condition="'$(DotNetPath)' == ''">dotnet</DotNetPath>
      <RunArgs>$(DriverOutputPath) $(Scenario) -s $(Server) -c $(Client) --description $(Description) --aspnetCoreVersion $(AspNetCoreVersion) --runtimeVersion $(RuntimeVersion) </RunArgs>
      <RunArgs Condition="'$(BENCHMARK_SQL)' != ''">$(RunArgs) -q $(BENCHMARK_SQL)</RunArgs>
      <RunArgs Condition="'$(Quiet)' != 'true'">$(RunArgs) -v</RunArgs>
    </PropertyGroup>

    <Message Text="Running: $(RunArgs)" Importance="High" />
    <Exec Command="&quot;$(DotNetPath)&quot; $(RunArgs)" WorkingDirectory="$(RepositoryRoot)src\BenchmarksDriver\" />
  </Target>

 </Project>
