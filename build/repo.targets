<Project>

  <PropertyGroup>
    <PlaintextJobs>-j "$(RepositoryRoot)src/Benchmarks/benchmarks.plaintext.json"</PlaintextJobs>
    <HtmlJobs>-j "$(RepositoryRoot)src/Benchmarks/benchmarks.html.json"</HtmlJobs>
    <JsonJobs>-j "$(RepositoryRoot)src/Benchmarks/benchmarks.json.json"</JsonJobs>
    <MultiQueryJobs>-j "$(RepositoryRoot)src/Benchmarks/benchmarks.multiquery.json"</MultiQueryJobs>
  </PropertyGroup>

  <ItemGroup>

    <!-- Default ThreadCount (cores / 2) is optimal for current hardware -->
    <CloudScenarios Include="-n Plaintext $(PlaintextJobs)" />
    <CloudScenarios Include="-n Plaintext --webHost KestrelLibuv $(PlaintextJobs)" />
    <CloudScenarios Include="-n MvcPlaintext $(PlaintextJobs)" />
    <CloudScenarios Include="-n MvcPlaintext --webHost KestrelLibuv $(PlaintextJobs)" />

    <CloudScenarios Include="-n Json $(JsonJobs)" />
    <CloudScenarios Include="-n Json --webHost KestrelLibuv $(JsonJobs)" />
    <CloudScenarios Include="-n Jil $(JsonJobs)" />
    <CloudScenarios Include="-n MvcJson $(JsonJobs)" />
    <CloudScenarios Include="-n MvcJson --webHost KestrelLibuv $(JsonJobs)" />
    <CloudScenarios Include="-n MvcJil $(JsonJobs)" />

    <CloudScenarios Include="-n DbSingleQueryRaw $(JsonJobs) --database PostgreSql" />
    <CloudScenarios Include="-n DbSingleQueryDapper $(JsonJobs) --database PostgreSql" />
    <CloudScenarios Include="-n DbSingleQueryEf $(JsonJobs) --database PostgreSql" />
    <CloudScenarios Include="-n MvcDbSingleQueryRaw $(JsonJobs) --database PostgreSql" />
    <CloudScenarios Include="-n MvcDbSingleQueryDapper $(JsonJobs) --database PostgreSql" />
    <CloudScenarios Include="-n MvcDbSingleQueryEf $(JsonJobs) --database PostgreSql" />

    <CloudScenarios Include="-n DbMultiQueryRaw $(MultiQueryJobs) --database PostgreSql" />
    <CloudScenarios Include="-n DbMultiQueryDapper $(MultiQueryJobs) --database PostgreSql" />
    <CloudScenarios Include="-n DbMultiQueryEf $(MultiQueryJobs) --database PostgreSql" />
    <CloudScenarios Include="-n MvcDbMultiQueryRaw $(MultiQueryJobs) --database PostgreSql" />
    <CloudScenarios Include="-n MvcDbMultiQueryDapper $(MultiQueryJobs) --database PostgreSql" />
    <CloudScenarios Include="-n MvcDbMultiQueryEf $(MultiQueryJobs) --database PostgreSql" />

    <CloudScenarios Include="-n DbMultiUpdateRaw $(MultiQueryJobs) --database PostgreSql" />
    <CloudScenarios Include="-n DbMultiUpdateDapper $(MultiQueryJobs) --database PostgreSql" />
    <CloudScenarios Include="-n DbMultiUpdateEf $(MultiQueryJobs) --database PostgreSql" />
    <CloudScenarios Include="-n MvcDbMultiUpdateRaw $(MultiQueryJobs) --database PostgreSql" />
    <CloudScenarios Include="-n MvcDbMultiUpdateDapper $(MultiQueryJobs) --database PostgreSql" />
    <CloudScenarios Include="-n MvcDbMultiUpdateEf $(MultiQueryJobs) --database PostgreSql" />

    <CloudScenarios Include="-n DbFortunesRaw $(HtmlJobs) --database PostgreSql" />
    <CloudScenarios Include="-n DbFortunesDapper $(HtmlJobs) --database PostgreSql" />
    <CloudScenarios Include="-n DbFortunesEf $(HtmlJobs) --database PostgreSql" />
    <CloudScenarios Include="-n MvcDbFortunesRaw $(HtmlJobs) --database PostgreSql" />
    <CloudScenarios Include="-n MvcDbFortunesDapper $(HtmlJobs) --database PostgreSql" />
    <CloudScenarios Include="-n MvcDbFortunesEf $(HtmlJobs) --database PostgreSql" />
  </ItemGroup>

  <ItemGroup>

    <PhysicalScenarios Include="-n Plaintext $(PlaintextJobs)" />
    <!-- Optimal ThreadCount for current hardware -->
    <PhysicalScenarios Include="-n Plaintext --webHost KestrelLibuv --kestrelThreadCount 2 $(PlaintextJobs)" />
    <PhysicalScenarios Include="-n Plaintext --webHost HttpSys $(PlaintextJobs)" />
    <PhysicalScenarios Include="-n Plaintext -f Benchmarks.PassthroughConnectionFilter $(PlaintextJobs)" />

    <PhysicalScenarios Include="-n Plaintext -m https $(PlaintextJobs)" />
    <PhysicalScenarios Include="-n Plaintext -m https --webHost KestrelLibuv $(PlaintextJobs)" />
    <PhysicalScenarios Include="-n Plaintext -m https --webHost HttpSys $(PlaintextJobs)" />

    <!-- Default ThreadCount (cores / 2) is optimal for current hardware -->
    <PhysicalScenarios Include="-n Json $(JsonJobs)" />
    <PhysicalScenarios Include="-n Json --webHost KestrelLibuv $(JsonJobs)" />
    <PhysicalScenarios Include="-n Json --webHost HttpSys $(JsonJobs)" />
    <PhysicalScenarios Include="-n Json -f Benchmarks.PassthroughConnectionFilter $(JsonJobs)" />

    <PhysicalScenarios Include="-n Json -m https $(JsonJobs)" />
    <PhysicalScenarios Include="-n Json -m https --webHost KestrelLibuv $(JsonJobs)" />
    <PhysicalScenarios Include="-n Json -m https --webHost HttpSys $(JsonJobs)" />

    <PhysicalScenarios Include="-n Jil $(JsonJobs)" />

    <PhysicalScenarios Include="-n StaticFiles --path plaintext $(PlaintextJobs)" />

    <PhysicalScenarios Include="-n MvcPlaintext $(PlaintextJobs)" />
    <PhysicalScenarios Include="-n MvcJson $(JsonJobs)" />
    <PhysicalScenarios Include="-n MvcJil $(JsonJobs)" />

    <PhysicalScenarios Include="-n MemoryCachePlaintext $(PlaintextJobs)" />
    <PhysicalScenarios Include="-n MemoryCachePlaintextSetRemove $(PlaintextJobs)" />

    <PhysicalScenarios Include="-n ResponseCachingPlaintextCached $(PlaintextJobs)" />
    <PhysicalScenarios Include="-n ResponseCachingPlaintextCached --method DELETE $(PlaintextJobs)" />
    <PhysicalScenarios Include="-n ResponseCachingPlaintextResponseNoCache $(PlaintextJobs)" />
    <PhysicalScenarios Include="-n ResponseCachingPlaintextRequestNoCache $(PlaintextJobs)" />
    <PhysicalScenarios Include="-n ResponseCachingPlaintextVaryByCached $(PlaintextJobs)" />
  </ItemGroup>

  <PropertyGroup>
    <BenchmarksDependsOn Condition="'$(NoBuild)' != 'true'">Compile</BenchmarksDependsOn>
  </PropertyGroup>

  <Target Name="TestBenchmarks" DependsOnTargets="$(BenchmarksDependsOn)">
    <MSBuild Projects="$(RepositoryRoot)src\BenchmarksDriver\BenchmarksDriver.csproj"
      Targets="GetTargetPath"
      Properties="Configuration=$(Configuration)">
      <Output TaskParameter="TargetOutputs" PropertyName="DriverOutputPath" />
    </MSBuild>

    <GetDotNetHost>
      <Output TaskParameter="ExecutablePath" PropertyName="DotNetPath" />
    </GetDotNetHost>

    <MSBuild Projects="$(MSBuildProjectFullPath)"
      Condition="'$(BENCHMARK_SERVER_CLOUD)' != '' AND '$(BENCHMARK_CLIENT_CLOUD)' != ''"
      Targets="RunBenchmark"
      Properties="Scenario=%(CloudScenarios.Identity);Server=$(BENCHMARK_SERVER_CLOUD);Client=$(BENCHMARK_CLIENT_CLOUD);DotNetPath=$(DotNetPath);DriverOutputPath=$(DriverOutputPath);NoBuild=true" />

    <MSBuild Projects="$(MSBuildProjectFullPath)"
      Condition="'$(BENCHMARK_SERVER_PHYSICAL)' != '' AND '$(BENCHMARK_CLIENT_PHYSICAL)' != ''"
      Targets="RunBenchmark"
      Properties="Scenario=%(PhysicalScenarios.Identity);Server=$(BENCHMARK_SERVER_PHYSICAL);Client=$(BENCHMARK_CLIENT_PHYSICAL);DotNetPath=$(DotNetPath);DriverOutputPath=$(DriverOutputPath);NoBuild=true" />
  </Target>

  <Target Name="RunBenchmark" DependsOnTargets="$(BenchmarksDependsOn)">
    <PropertyGroup>
      <DotNetPath Condition="'$(DotNetPath)' == ''">dotnet</DotNetPath>
      <RunArgs>$(DriverOutputPath) $(Scenario) -s $(Server) -c $(Client) --description "Trend/Latest" </RunArgs>
      <RunArgs Condition="'$(BENCHMARK_SQL)' != ''">$(RunArgs) -q $(BENCHMARK_SQL)</RunArgs>
      <RunArgs Condition="'$(Quiet)' != 'true'">$(RunArgs) -v</RunArgs>
    </PropertyGroup>

    <Message Text="Running: $(RunArgs)" Importance="High" />
    <Exec Command="&quot;$(DotNetPath)&quot; $(RunArgs)" WorkingDirectory="$(RepositoryRoot)src\BenchmarksDriver\" />
  </Target>

 </Project>
