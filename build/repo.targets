<Project>

  <PropertyGroup>
    <PlaintextJobs>-j "$(RepositoryRoot)src/Benchmarks/benchmarks.plaintext.json"</PlaintextJobs>
    <HtmlJobs>-j "$(RepositoryRoot)src/Benchmarks/benchmarks.html.json"</HtmlJobs>
    <JsonJobs>-j "$(RepositoryRoot)src/Benchmarks/benchmarks.json.json"</JsonJobs>
    <MultiQueryJobs>-j "$(RepositoryRoot)src/Benchmarks/benchmarks.multiquery.json"</MultiQueryJobs>
    <SignalRJobs>-j $(RepositoryRoot)src/Benchmarks/signalr.json -t SignalR</SignalRJobs>
  </PropertyGroup>

  <ItemDefinitionGroup>
    
    <CloudScenarios>
      <Description>Trend/Latest</Description>
      <AspNetCoreVersion>Latest</AspNetCoreVersion>
      <RuntimeVersion>Latest</RuntimeVersion>
    </CloudScenarios>
    
    <PhysicalScenarios>
      <Description>Trend/Latest</Description>
      <AspNetCoreVersion>Latest</AspNetCoreVersion>
      <RuntimeVersion>Latest</RuntimeVersion>
    </PhysicalScenarios>
  
  </ItemDefinitionGroup>
  
  <ItemGroup>

    <CloudScenarios Include="-n Plaintext --webHost KestrelSockets $(PlaintextJobs)" />
    <CloudScenarios Include="-n Plaintext --webHost KestrelLibuv $(PlaintextJobs)" />
    <CloudScenarios Include="-n MvcPlaintext --webHost KestrelSockets $(PlaintextJobs)" />
    <CloudScenarios Include="-n MvcPlaintext --webHost KestrelLibuv $(PlaintextJobs)" />

    <CloudScenarios Include="-n Json --webHost KestrelSockets $(JsonJobs)" />
    <CloudScenarios Include="-n Json --webHost KestrelLibuv $(JsonJobs)" />
    <CloudScenarios Include="-n Jil --webHost KestrelLibuv $(JsonJobs)" />
    <CloudScenarios Include="-n MvcJson --webHost KestrelSockets $(JsonJobs)" />
    <CloudScenarios Include="-n MvcJson --webHost KestrelLibuv $(JsonJobs)" />
    <CloudScenarios Include="-n MvcJil --webHost KestrelLibuv $(JsonJobs)" />

    <CloudScenarios Include="-n DbSingleQueryRaw --webHost KestrelLibuv $(JsonJobs) --database PostgreSql" />
    <CloudScenarios Include="-n DbSingleQueryDapper --webHost KestrelLibuv $(JsonJobs) --database PostgreSql" />
    <CloudScenarios Include="-n DbSingleQueryMongoDb --webHost KestrelLibuv $(JsonJobs) --database MongoDb" />
    <CloudScenarios Include="-n DbSingleQueryEf --webHost KestrelLibuv $(JsonJobs) --database PostgreSql" />
    <CloudScenarios Include="-n MvcDbSingleQueryRaw --webHost KestrelLibuv $(JsonJobs) --database PostgreSql" />
    <CloudScenarios Include="-n MvcDbSingleQueryDapper --webHost KestrelLibuv $(JsonJobs) --database PostgreSql" />
    <CloudScenarios Include="-n MvcDbSingleQueryEf --webHost KestrelLibuv $(JsonJobs) --database PostgreSql" />

    <CloudScenarios Include="-n DbMultiQueryRaw --webHost KestrelLibuv $(MultiQueryJobs) --database PostgreSql" />
    <CloudScenarios Include="-n DbMultiQueryDapper --webHost KestrelLibuv $(MultiQueryJobs) --database PostgreSql" />
    <CloudScenarios Include="-n DbMultiQueryMongoDb --webHost KestrelLibuv $(MultiQueryJobs) --database MongoDb" />
    <CloudScenarios Include="-n DbMultiQueryEf --webHost KestrelLibuv $(MultiQueryJobs) --database PostgreSql" />
    <CloudScenarios Include="-n MvcDbMultiQueryRaw --webHost KestrelLibuv $(MultiQueryJobs) --database PostgreSql" />
    <CloudScenarios Include="-n MvcDbMultiQueryDapper --webHost KestrelLibuv $(MultiQueryJobs) --database PostgreSql" />
    <CloudScenarios Include="-n MvcDbMultiQueryEf --webHost KestrelLibuv $(MultiQueryJobs) --database PostgreSql" />

    <CloudScenarios Include="-n DbMultiUpdateRaw --webHost KestrelLibuv $(MultiQueryJobs) --database PostgreSql" />
    <CloudScenarios Include="-n DbMultiUpdateDapper --webHost KestrelLibuv $(MultiQueryJobs) --database PostgreSql" />
    <CloudScenarios Include="-n DbMultiUpdateEf --webHost KestrelLibuv $(MultiQueryJobs) --database PostgreSql" />
    <CloudScenarios Include="-n MvcDbMultiUpdateRaw --webHost KestrelLibuv $(MultiQueryJobs) --database PostgreSql" />
    <CloudScenarios Include="-n MvcDbMultiUpdateDapper --webHost KestrelLibuv $(MultiQueryJobs) --database PostgreSql" />
    <CloudScenarios Include="-n MvcDbMultiUpdateEf --webHost KestrelLibuv $(MultiQueryJobs) --database PostgreSql" />

    <CloudScenarios Include="-n DbFortunesRaw --webHost KestrelLibuv $(HtmlJobs) --database PostgreSql" />
    <CloudScenarios Include="-n DbFortunesRaw --webHost KestrelLibuv $(HtmlJobs) --database PostgreSql" Description="Baseline" AspNetCoreVersion="Current" RuntimeVersion="Current" />
    <CloudScenarios Include="-n DbFortunesDapper --webHost KestrelLibuv $(HtmlJobs) --database PostgreSql" />
    <CloudScenarios Include="-n DbFortunesMongoDb --webHost KestrelLibuv $(HtmlJobs) --database MongoDb" />
    <CloudScenarios Include="-n DbFortunesEf --webHost KestrelLibuv $(HtmlJobs) --database PostgreSql" />
    <CloudScenarios Include="-n DbFortunesEf --webHost KestrelLibuv $(HtmlJobs) --database PostgreSql" Description="Baseline" AspNetCoreVersion="Current" RuntimeVersion="Current" />
    <CloudScenarios Include="-n MvcDbFortunesRaw --webHost KestrelLibuv $(HtmlJobs) --database PostgreSql" />
    <CloudScenarios Include="-n MvcDbFortunesDapper --webHost KestrelLibuv $(HtmlJobs) --database PostgreSql" />
    <CloudScenarios Include="-n MvcDbFortunesEf --webHost KestrelLibuv $(HtmlJobs) --database PostgreSql" />

    <CloudScenarios Include="-n SignalRBroadcast --properties 'TransportType=WebSockets;HubProtocol=json' $(SignalRJobs)" />
    <CloudScenarios Include="-n SignalRBroadcast --properties 'TransportType=WebSockets;HubProtocol=messagepack' $(SignalRJobs)" />
    <CloudScenarios Include="-n SignalRBroadcast --properties 'TransportType=ServerSentEvents;HubProtocol=json' $(SignalRJobs)" />
    <CloudScenarios Include="-n SignalRBroadcast --properties 'TransportType=ServerSentEvents;HubProtocol=messagepack' $(SignalRJobs)" />
    <CloudScenarios Include="-n SignalRBroadcast --properties 'TransportType=LongPolling;HubProtocol=json' $(SignalRJobs)" />
    <CloudScenarios Include="-n SignalRBroadcast --properties 'TransportType=LongPolling;HubProtocol=messagepack' $(SignalRJobs)" />
  </ItemGroup>

  <ItemGroup>

    <PhysicalScenarios Include="-n Plaintext --webHost KestrelSockets $(PlaintextJobs)" />
    <PhysicalScenarios Include="-n Plaintext --webHost KestrelSockets $(PlaintextJobs)" Description="Baseline" AspNetCoreVersion="Current" RuntimeVersion="Current"/>
    
    <!-- Optimal ThreadCount for current hardware -->
    <PhysicalScenarios Include="-n Plaintext --webHost KestrelLibuv --kestrelThreadCount 2 $(PlaintextJobs)" />
    <PhysicalScenarios Include="-n Plaintext --webHost KestrelLibuv --kestrelThreadCount 2 $(PlaintextJobs)" Description="Baseline" AspNetCoreVersion="Current" RuntimeVersion="Current"/>

    <PhysicalScenarios Include="-n Plaintext --webHost HttpSys $(PlaintextJobs)" />
    <PhysicalScenarios Include="-n Plaintext --webHost KestrelLibuv -f Benchmarks.PassthroughConnectionFilter $(PlaintextJobs)" />

    <PhysicalScenarios Include="-n Plaintext -m https --webHost KestrelSockets $(PlaintextJobs)" />
    <PhysicalScenarios Include="-n Plaintext -m https --webHost KestrelLibuv $(PlaintextJobs)" />
    <PhysicalScenarios Include="-n Plaintext -m https --webHost HttpSys $(PlaintextJobs)" />

    <!-- Default ThreadCount (cores / 2) is optimal for current hardware -->
    <PhysicalScenarios Include="-n Json --webHost KestrelSockets $(JsonJobs)" />
    <PhysicalScenarios Include="-n Json --webHost KestrelSockets $(JsonJobs)"  Description="Baseline" AspNetCoreVersion="Current" RuntimeVersion="Current"/>
    <PhysicalScenarios Include="-n Json --webHost KestrelLibuv $(JsonJobs)" />
    <PhysicalScenarios Include="-n Json --webHost KestrelLibuv $(JsonJobs)" Description="Baseline" AspNetCoreVersion="Current" RuntimeVersion="Current"/>
    <PhysicalScenarios Include="-n Json --webHost HttpSys $(JsonJobs)" />
    <PhysicalScenarios Include="-n Json --webHost KestrelLibuv -f Benchmarks.PassthroughConnectionFilter $(JsonJobs)" />

    <PhysicalScenarios Include="-n Json -m https --webHost KestrelSockets $(JsonJobs)" />
    <PhysicalScenarios Include="-n Json -m https --webHost KestrelLibuv $(JsonJobs)" />
    <PhysicalScenarios Include="-n Json -m https --webHost HttpSys $(JsonJobs)" />

    <PhysicalScenarios Include="-n Jil --webHost KestrelLibuv $(JsonJobs)" />

    <PhysicalScenarios Include="-n StaticFiles --webHost KestrelLibuv --path plaintext $(PlaintextJobs)" />

    <PhysicalScenarios Include="-n MvcPlaintext --webHost KestrelLibuv $(PlaintextJobs)" />
    <PhysicalScenarios Include="-n MvcJson --webHost KestrelLibuv $(JsonJobs)" />
    <PhysicalScenarios Include="-n MvcJil --webHost KestrelLibuv $(JsonJobs)" />

    <PhysicalScenarios Include="-n MemoryCachePlaintext --webHost KestrelLibuv --kestrelThreadCount 2 $(PlaintextJobs)" />
    <PhysicalScenarios Include="-n MemoryCachePlaintextSetRemove --webHost KestrelLibuv --kestrelThreadCount 2 $(PlaintextJobs)" />

    <PhysicalScenarios Include="-n ResponseCachingPlaintextCached --webHost KestrelLibuv --kestrelThreadCount 2 $(PlaintextJobs)" />
    <PhysicalScenarios Include="-n ResponseCachingPlaintextCached --webHost KestrelLibuv --kestrelThreadCount 2 --method DELETE $(PlaintextJobs)" />
    <PhysicalScenarios Include="-n ResponseCachingPlaintextResponseNoCache --webHost KestrelLibuv --kestrelThreadCount 2 $(PlaintextJobs)" />
    <PhysicalScenarios Include="-n ResponseCachingPlaintextRequestNoCache --webHost KestrelLibuv --kestrelThreadCount 2 $(PlaintextJobs)" />
    <PhysicalScenarios Include="-n ResponseCachingPlaintextVaryByCached --webHost KestrelLibuv --kestrelThreadCount 2 $(PlaintextJobs)" />

    <PhysicalScenarios Include="-n SignalRBroadcast --properties 'TransportType=WebSockets;HubProtocol=json' $(SignalRJobs)" />
    <PhysicalScenarios Include="-n SignalRBroadcast --properties 'TransportType=WebSockets;HubProtocol=messagepack' $(SignalRJobs)" />
    <PhysicalScenarios Include="-n SignalRBroadcast --properties 'TransportType=ServerSentEvents;HubProtocol=json' $(SignalRJobs)" />
    <PhysicalScenarios Include="-n SignalRBroadcast --properties 'TransportType=ServerSentEvents;HubProtocol=messagepack' $(SignalRJobs)" />
    <PhysicalScenarios Include="-n SignalRBroadcast --properties 'TransportType=LongPolling;HubProtocol=json' $(SignalRJobs)" />
    <PhysicalScenarios Include="-n SignalRBroadcast --properties 'TransportType=LongPolling;HubProtocol=messagepack' $(SignalRJobs)" />

  </ItemGroup>

  <PropertyGroup>
    <BenchmarksDependsOn Condition="'$(NoBuild)' != 'true'">Compile</BenchmarksDependsOn>
  </PropertyGroup>

  <Target Name="TestBenchmarks" DependsOnTargets="$(BenchmarksDependsOn)">
    <MSBuild Projects="$(RepositoryRoot)src\BenchmarksDriver\BenchmarksDriver.csproj"
      Targets="GetTargetPath"
      Properties="Configuration=$(Configuration)">
      <Output TaskParameter="TargetOutputs" PropertyName="DriverOutputPath" />
    </MSBuild>

    <GetDotNetHost>
      <Output TaskParameter="ExecutablePath" PropertyName="DotNetPath" />
    </GetDotNetHost>

    <ItemGroup>
      <RunProjects Include="$(MSBuildProjectFullPath)" Condition="'$(BENCHMARK_SERVER_CLOUD)' != '' AND '$(BENCHMARK_CLIENT_CLOUD)' != ''">
        <AdditionalProperties>
          Scenario=%(CloudScenarios.Identity);
          Description=%(CloudScenarios.Description);
          RuntimeVersion=%(CloudScenarios.RuntimeVersion);
          AspNetCoreVersion=%(CloudScenarios.AspNetCoreVersion);
          Server=$(BENCHMARK_SERVER_CLOUD);
          Client=$(BENCHMARK_CLIENT_CLOUD);
          DotNetPath=$(DotNetPath);
          DriverOutputPath=$(DriverOutputPath);
          NoBuild=true
        </AdditionalProperties>
      </RunProjects>

      <RunProjects Include="$(MSBuildProjectFullPath)" Condition="'$(BENCHMARK_SERVER_PHYSICAL)' != '' AND '$(BENCHMARK_CLIENT_PHYSICAL)' != ''">
        <AdditionalProperties>
          Scenario=%(PhysicalScenarios.Identity);
          Description=%(PhysicalScenarios.Description);
          RuntimeVersion=%(PhysicalScenarios.RuntimeVersion);
          AspNetCoreVersion=%(PhysicalScenarios.AspNetCoreVersion);
          Server=$(BENCHMARK_SERVER_PHYSICAL);
          Client=$(BENCHMARK_CLIENT_PHYSICAL);
          DotNetPath=$(DotNetPath);
          DriverOutputPath=$(DriverOutputPath);
          NoBuild=true
        </AdditionalProperties>
      </RunProjects>
    </ItemGroup>

    <!-- All the scenarios are run, even if one fails. When one fails the task will return as errored -->
    <MSBuild Projects="@(RunProjects)" Targets="RunBenchmark" BuildInParallel="false" />
    
  </Target>

  <Target Name="RunBenchmark" DependsOnTargets="$(BenchmarksDependsOn)">
    <PropertyGroup>
      <DotNetPath Condition="'$(DotNetPath)' == ''">dotnet</DotNetPath>
      <RunArgs>$(DriverOutputPath) $(Scenario) -s $(Server) -c $(Client) --description $(Description) --aspnetCoreVersion $(AspNetCoreVersion) --runtimeVersion $(RuntimeVersion) </RunArgs>
      <RunArgs Condition="'$(BENCHMARK_SQL)' != ''">$(RunArgs) -q $(BENCHMARK_SQL)</RunArgs>
      <RunArgs Condition="'$(Quiet)' != 'true'">$(RunArgs) -v</RunArgs>
    </PropertyGroup>

    <Message Text="Running: $(RunArgs)" Importance="High" />
    <Exec Command="&quot;$(DotNetPath)&quot; $(RunArgs)" WorkingDirectory="$(RepositoryRoot)src\BenchmarksDriver\" />
  </Target>

 </Project>
