# gRPC scenarios

parameters:
- name: arguments
  type: string
  default: ''
- name: connection
  type: string
  default: ''
- name: condition
  type: string
  default: 'true'
- name: runH3
  type: string
  default: 'true'

# Standard scenarios
- name: scenarios 
  type: object
  default:

  - displayName: "ASP.NET Core - Client: Grpc.Net.Client"
    arguments: --scenario grpcaspnetcoreserver-grpcnetclient  $(grpcJobs) --property server=grpcaspnetcoreserver --property client=grpcnetclient --application.options.collectCounters true
  - displayName: "ASP.NET Core - Client: Go"
    arguments: --scenario grpcaspnetcoreserver-grpcgoclient   $(grpcJobs) --property server=grpcaspnetcoreserver --property client=grpcgoclient --application.options.collectCounters true

  - displayName: "Go - Client: Grpc.Net.Client"
    arguments: --scenario grpcgoserver-grpcnetclient          $(grpcJobs) --property server=grpcgoserver --property client=grpcnetclient
  - displayName: "Go - Client: Go"
    arguments: --scenario grpcgoserver-grpcgoclient           $(grpcJobs) --property server=grpcgoserver --property client=grpcgoclient

# H2Load scenarios
- name: h2loadscenarios 
  type: object
  default:

  - displayName: "ASP.NET Core - Client: h2load"
    arguments: --scenario grpcaspnetcoreserver-h2loadclient   $(grpcJobs) --property server=grpcaspnetcoreserver --property client=h2loadclient --application.options.collectCounters true
  - displayName: "Go - Client: h2load"
    arguments: --scenario grpcgoserver-h2loadclient           $(grpcJobs) --property server=grpcgoserver --property client=h2loadclient

# grpc-net only scenarios
- name: grpcnetscenarios 
  type: object
  default:

  - displayName: "ASP.NET Core - Client: Grpc.Net.Client"
    arguments: --scenario grpcaspnetcoreserver-grpcnetclient  $(grpcJobs) --property server=grpcaspnetcoreserver --property client=grpcnetclient --application.options.collectCounters true

- name: callTypes
  type: object
  default:
    - displayName: "Call: Unary"
      arguments: --variable scenario=unary --property scenario=unary
    - displayName: "Call: Server Streaming"
      arguments: --variable scenario=serverstreaming --property scenario=serverstreaming
    - displayName: "Call: Ping Pong Streaming"
      arguments: --variable scenario=pingpongstreaming --property scenario=pingpongstreaming

- name: protocols
  type: object
  default:
    - displayName: "h2"
      arguments: --variable protocol=h2 --property protocol=h2
    - displayName: "h3"
      arguments: --variable protocol=h3 --property protocol=h3

- name: payloads
  type: object
  default:
    - displayName: "Payload: 0 B"
      arguments: --variable requestSize=0 --variable responseSize=0 --property payload=0

- name: connectionStreams
  type: object
  default:
    - displayName: "Streams: 1"
      arguments: --variable streams=1 --variable connections=$(h2loadConnectionsCount) --variable threads=$(h2loadConnectionsCount) --property streams=1
    - displayName: "Streams: 1x1"
      arguments: --variable streams=1 --variable connections=1 --variable threads=1 --property streams=1x1
    - displayName: "Streams: 70"
      arguments: --variable streams=70 --variable connections=$(h2loadConnectionsCount) --variable threads=$(h2loadConnectionsCount) --property streams=70
    - displayName: "Streams: 70x1"
      arguments: --variable streams=70 --variable connections=1 --variable threads=1 --property streams=70x1

steps:
# h2c h2load unary to various servers
- ${{ each s in parameters.h2loadscenarios }}:
  - ${{ each stream in parameters.connectionStreams }}:
    - task: PublishToAzureServiceBus@1
      condition: succeededOrFailed()
      displayName: h2c ${{ s.displayName }} ${{ stream.displayName }}
      inputs:
        connectedServiceName: ${{ parameters.connection }}
        waitForCompletion: true
        messageBody: |
          {
            "condition": "${{ parameters.condition }} && (new Date().getUTCHours() - 7 + 24) % 24 >= 13",
            "name": "crank",
            "args": [ "--application.framework net8.0 --command-line-property --table GrpcBenchmarks --sql SQL_CONNECTION_STRING --chart --session $(session) --no-metadata --no-measurements ${{ parameters.arguments }} ${{ s.arguments }} ${{ stream.arguments }} --variable protocol=h2c --property protocol=h2c --property scenario=unary --property payload=0 --variable body=AAAAAAcKBVdvcmxk --variable path=/grpc.testing.BenchmarkService/UnaryCall" ]	
          }

# h2/h3 HttpClient to ASP.NET Core
# h3 is currently Linux only
- ${{ each s in parameters.grpcnetscenarios }}:
  - ${{ each callType in parameters.callTypes }}:
    - ${{ each payload in parameters.payloads }}:
      - ${{ each protocol in parameters.protocols }}:
        - ${{ each stream in parameters.connectionStreams }}:
          - ${{ if or( not( eq(protocol.displayName, 'h3')), eq( parameters.runH3, 'true')) }}:
            - task: PublishToAzureServiceBus@1
              condition: succeededOrFailed()
              timeoutInMinutes: 5
              displayName: ${{ protocol.displayName }} ${{ s.displayName }} ${{ callType.displayName }} ${{ payload.displayName }} ${{ stream.displayName }}
              inputs:
                connectedServiceName: ${{ parameters.connection }}
                waitForCompletion: true
                messageBody: |
                  {
                    "condition": "${{ parameters.condition }} && (new Date().getUTCHours() - 7 + 24) % 24 >= 13",
                    "name": "crank",
                    "args": [ "--application.framework net8.0 --load.framework net8.0 --command-line-property --table GrpcBenchmarks --sql SQL_CONNECTION_STRING --chart --session $(session) --no-metadata --no-measurements ${{ parameters.arguments }} ${{ s.arguments }} ${{ callType.arguments }} ${{ payload.arguments }} ${{ stream.arguments }} ${{ protocol.arguments }}" ]
                  }

# h2c between various clients and servers
- ${{ each s in parameters.scenarios }}:
  - ${{ each callType in parameters.callTypes }}:
    - ${{ each payload in parameters.payloads }}:
      - ${{ each stream in parameters.connectionStreams }}:
        - task: PublishToAzureServiceBus@1
          condition: succeededOrFailed()
          timeoutInMinutes: 5
          displayName: h2c ${{ s.displayName }} ${{ callType.displayName }} ${{ payload.displayName }} ${{ stream.displayName }}
          inputs:
            connectedServiceName: ${{ parameters.connection }}
            waitForCompletion: true
            messageBody: |
              {
                "condition": "${{ parameters.condition }} && (new Date().getUTCHours() - 7 + 24) % 24 >= 13",
                "name": "crank",
                "args": [ "--application.framework net8.0 --load.framework net8.0 --command-line-property --table GrpcBenchmarks --sql SQL_CONNECTION_STRING --chart --session $(session) ${{ parameters.arguments }} --no-metadata --no-measurements ${{ s.arguments }} ${{ callType.arguments }} ${{ payload.arguments }} ${{ stream.arguments }} --variable protocol=h2c --property protocol=h2c" ]
              }
