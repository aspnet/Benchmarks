parameters:
- name: arguments
  type: string
  default: ''
- name: connection
  type: string
  default: ''
- name: serviceBusQueueName
  type: string
  default: ''
- name: serviceBusNamespace
  type: string
  default: ''
- name: condition
  type: string
  default: 'true'
  
- name: scenarios
  type: object
  default:

  - displayName: "Build - BlazorWasm"
    arguments: --scenario blazorwasm $(buildJobs) --property scenario=BlazorWasm 
  - displayName: "Build - BlazorWasm (Hosted)"
    arguments: --scenario blazorwasm-hosted $(buildJobs) --property scenario=BlazorWasmHosted
  - displayName: "Build - BlazorServer"
    arguments: --scenario blazorserver $(buildJobs) --property scenario=BlazorServer
  - displayName: "Build - MVC"
    arguments: --scenario mvc $(buildJobs) --property scenario=MVC
  - displayName: "Build - API"
    arguments: --scenario api $(buildJobs) --property scenario=API

steps:
- ${{ each s in parameters.scenarios }}:
  - task: PublishToAzureServiceBus@2
    condition: succeededOrFailed()
    displayName: ${{ s.displayName }}
    timeoutInMinutes: 10
    inputs:
      connectedServiceName: ${{ parameters.connection }}
      serviceBusQueueName: ${{ parameters.serviceBusQueueName }}
      serviceBusNamespace: ${{ parameters.serviceBusNamespace }}
      waitForCompletion: true
      useDataContractSerializer: "false"
      messageBody: |
        {
          "name": "crank",
          "condition": "(${{ parameters.condition }})",
          "args": [ "${{ parameters.arguments }} --application.framework net10.0 ${{ s.arguments }} --command-line-property --table BuildPerf --sql SQL_CONNECTION_STRING --cert-tenant-id SQL_SERVER_TENANTID --cert-client-id SQL_SERVER_CLIENTID --cert-path SQL_SERVER_CERT_PATH --cert-sni --no-metadata --no-measurements --session $(session) --description \"${{ s.displayName }} $(System.JobDisplayName)\" --property buildId=\"$(buildId)\" --property buildNumber=\"$(buildNumber)\" " ]
        }
