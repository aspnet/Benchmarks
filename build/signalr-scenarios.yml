# SignalR scenarios

parameters:
- name: server
  type: string
  default: ''
- name: client
  type: string
  default: ''
- name: warmup
  type: number
  default: 15
- name: duration
  type: number
  default: 15

# Scenarios
- name: scenarios 
  type: object
  default: 

  # SignalR
  - displayName: SignalRBroadcast WebSockets Json
    arguments: -n SignalRBroadcast -p TransportType=WebSockets -p HubProtocol=json $(signalRJobs)
  - displayName: SignalRBroadcast WebSockets MessagePack
    arguments: -n SignalRBroadcast -p TransportType=WebSockets -p HubProtocol=messagepack $(signalRJobs)
  - displayName: SignalRBroadcast ServerSentEvents Json
    arguments: -n SignalRBroadcast -p TransportType=ServerSentEvents -p HubProtocol=json $(signalRJobs)
  - displayName: SignalRBroadcast LongPolling Json
    arguments: -n SignalRBroadcast -p TransportType=LongPolling -p HubProtocol=json $(signalRJobs)
  - displayName: SignalRBroadcast LongPolling MessagePack
    arguments: -n SignalRBroadcast -p TransportType=LongPolling -p HubProtocol=messagepack $(signalRJobs)
  - displayName: SignalREcho WebSockets Json
    arguments: -n SignalREcho -p TransportType=WebSockets -p HubProtocol=json $(signalRJobs)
  - displayName: SignalREcho WebSockets MessagePack
    arguments: -n SignalREcho -p TransportType=WebSockets -p HubProtocol=messagepack $(signalRJobs)
  - displayName: SignalREcho ServerSentEvents Json
    arguments: -n SignalREcho -p TransportType=ServerSentEvents -p HubProtocol=json $(signalRJobs)
  - displayName: SignalREcho LongPolling Json
    arguments: -n SignalREcho -p TransportType=LongPolling -p HubProtocol=json $(signalRJobs)
  - displayName: SignalREcho LongPolling MessagePack
    arguments: -n SignalREcho -p TransportType=LongPolling -p HubProtocol=messagepack $(signalRJobs)
  - displayName: SignalREchoAll WebSockets Json
    arguments: -n SignalREchoAll -p TransportType=WebSockets -p HubProtocol=json $(signalRJobs)
  - displayName: SignalREchoAll WebSockets MessagePack
    arguments: -n SignalREchoAll -p TransportType=WebSockets -p HubProtocol=messagepack $(signalRJobs)
  - displayName: SignalREchoAll ServerSentEvents Json
    arguments: -n SignalREchoAll -p TransportType=ServerSentEvents -p HubProtocol=json $(signalRJobs)
  - displayName: SignalREchoAll LongPolling Json
    arguments: -n SignalREchoAll -p TransportType=LongPolling -p HubProtocol=json $(signalRJobs)
  - displayName: SignalREchoAll LongPolling MessagePack
    arguments: -n SignalREchoAll -p TransportType=LongPolling -p HubProtocol=messagepack $(signalRJobs)

variables:
  session: "$[format('{0:yyyyMMddHHmm}', pipeline.startTime)]"
  defaultArgs: --server $(server) --client $(client) --runtimeversion 5.0.* --self-contained --warmup $(warmup) --duration $(duration) --collect-counters --description Trend/Latest --session $(session)
  sqlArgs: --table SignalR # --sql \"BENCHMARKS_CONNECTION_STRING\"

  signalRJobs: -j https://raw.githubusercontent.com/aspnet/Benchmarks/master/src/BenchmarksApps/SignalR/signalr.json

# Agent-less jobs need this pool
pool: server

jobs:
- job: Trend
  steps:
  - ${{ each s in parameters.scenarios }}:
    - task: PublishToAzureServiceBus@1
      condition: always()
      displayName: ${{ s.displayName }}
      inputs:
        azureSubscription: ASP.NET Benchmarks Queue
        waitForCompletion: true
        messageBody: |
          {
            "name": "benchmarksdriver",
            "args": [ "$(defaultArgs) $(sqlArgs) ${{ s.arguments }}" ]
          }
