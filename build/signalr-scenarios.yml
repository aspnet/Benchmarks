# SignalR scenarios

parameters:
- name: profile
  type: string
  default: ''
- name: warmup
  type: number
  default: 0
- name: duration
  type: number
  default: 15
- name: connection
  type: string
  default: ''

# Scenarios
- name: scenarios 
  type: object
  default: 

  - displayName: Broadcast
    arguments: --scenario signalr $(signalRJobs) --variable scenario=broadcast --property scenario=broadcast
  - displayName: Echo
    arguments: --scenario signalr $(signalRJobs) --variable scenario=echo --property scenario=echo
  - displayName: Echo All
    arguments: --scenario signalr $(signalRJobs) --variable scenario=echoAll --property scenario=echoAll
#  - displayName: Echo Idle
#    arguments: --scenario signalr $(signalRJobs) --variable scenario=echoIdle --property scenario=echoIdle

# Transports
- name: transports 
  type: object
  default: 

  - displayName: WebSockets
    arguments: --variable transport=WebSockets --property transport=websockets
  - displayName: ServerSentEvents 
    arguments: --variable transport=ServerSentEvents --property transport=serversentevents
  - displayName: LongPolling
    arguments: --variable transport=LongPolling --property transport=longpolling

# Protocols
- name: protocols
  type: object
  default: 

  - displayName: Json
    arguments: --variable protocol=json --property protocol=json
  - displayName: MessagePack
    arguments: --variable protocol=messagepack --property protocol=messagepack

steps:
- ${{ each s in parameters.scenarios }}:
  - ${{ each transport in parameters.transports }}:
    - ${{ each protocol in parameters.protocols }}:
      - task: PublishToAzureServiceBus@1
        condition: succeededOrFailed()
        enabled: ${{ not( and( eq(transport.displayName, 'ServerSentEvents'), eq(protocol.displayName, 'MessagePack'))) }}
        displayName: ${{ s.displayName }} ${{ transport.displayName }} ${{ protocol.displayName }}
        inputs:
          connectedServiceName: ${{ parameters.connection }}
          waitForCompletion: true
          messageBody: |
            {
              "name": "benchmarksdriver2",
              "args": [ "${{ s.arguments }} ${{ transport.arguments }} ${{ protocol.arguments }} --application.collectCounters true --load.collectCounters true --warmup.variables.duration ${{ parameters.warmup }} --load.variables.duration ${{ parameters.duration }} --profile ${{ parameters.profile }} --load.runtimeversion 5.0.* --warmup.runtimeversion 5.0.* --application.runtimeversion 5.0.* --session $(session) --table SignalRBenchmarks --no-measurements --no-metadata --warmup.options.discardResults true" ]
            }
          #--sql SQL_CONNECTION_STRING

