# Proxy scenarios

parameters:
- name: profile
  type: string
  default: ''
- name: warmup
  type: number
  default: 5
- name: duration
  type: number
  default: 15
- name: connection
  type: string
  default: ''

# Scenarios
- name: scenarios 
  type: object
  default: 
  - displayName: Baseline
    arguments: --scenario proxy-baseline    $(proxyJobs) --property proxy=none
  - displayName: HttpClient
    arguments: --scenario proxy-httpclient  $(proxyJobs) --property proxy=httpclient --application.channel edge --application.framework net5.0
    supportsServerHttps: true
    supportsServerHttp2: true
  - displayName: NGinx
    arguments: --scenario proxy-nginx       $(proxyJobs) --property proxy=nginx
  - displayName: HAProxy
    arguments: --scenario proxy-haproxy     $(proxyJobs) --property proxy=haproxy
  - displayName: Envoy
    arguments: --scenario proxy-envoy       $(proxyJobs) --property proxy=envoy
  - displayName: YARP
    arguments: --scenario proxy-yarp        $(proxyJobs)  --property proxy=yarp --application.channel edge --application.framework net5.0
    supportsServerHttps: true
    supportsServerHttp2: true

- name: payloads
  type: object
  default:
    - displayName: "10 B"
      arguments: --variable path=/?s=10 --property payload=10
    - displayName: "100 B"
      arguments: --variable path=/?s=100 --property payload=100
    - displayName: "1 KB"
      arguments: --variable path=/?s=1024 --property payload=1024
    - displayName: "10 KB"
      arguments: --variable path=/?s=10240 --property payload=10240
    - displayName: "100 KB"
      arguments: --variable path=/?s=102400 --property payload=102400

- name: protocols
  type: object
  default:
    - displayName: http - http
      arguments: --variable serverScheme=http --variable downstreamScheme=http --load.variables.transport http1 --property serverProtocol=http --property downstreamProtocol=http 
      requiresServerHttps: false
      requiresServerHttp2: false
    - displayName: https - http
      arguments: --variable serverScheme=https --variable downstreamScheme=http --load.variables.transport http1 --property serverProtocol=https --property downstreamProtocol=http 
      requiresServerHttps: true
      requiresServerHttp2: false
    - displayName: https - https
      arguments: --variable serverScheme=https --variable downstreamScheme=https --load.variables.transport http1 --property serverProtocol=https --property downstreamProtocol=https 
      requiresServerHttps: true
      requiresServerHttp2: false
    - displayName: h2 - h2
      arguments: --variable serverScheme=https --variable downstreamScheme=https --load.variables.transport http2 --downstream.variables.httpProtocol http2 --property serverProtocol=h2 --property downstreamProtocol=h2 
      requiresServerHttps: false
      requiresServerHttp2: true
    - displayName: h2 - h2c
      arguments: --variable serverScheme=https --variable downstreamScheme=http --load.variables.transport http2 --downstream.variables.httpProtocol http2 --property serverProtocol=http --property downstreamProtocol=h2c 
      requiresServerHttps: false
      requiresServerHttp2: true

steps:
- ${{ each s in parameters.scenarios }}:
  - ${{ each payload in parameters.payloads }}:
    - ${{ each protocol in parameters.protocols }}:
      # doesn't requiresServerHttps or supportsServerHttps AND doesn't requiresServerHttp2 or supportsServerHttp2
      - ${{ if and( or ( eq(protocol.requiresServerHttps, false), eq(s.supportsServerHttps, true)), or ( eq(protocol.requiresServerHttp2, false), eq(s.supportsServerHttp2, true)) ) }}:
        - task: PublishToAzureServiceBus@1
          condition: succeededOrFailed()
          displayName: ${{ s.displayName }} ${{ payload.displayName }} ${{ protocol.displayName }}
          inputs:
            connectedServiceName: ${{ parameters.connection }}
            waitForCompletion: true
            messageBody: |
              {
                "name": "crank",
                "args": [ "--table ProxyBenchmarks --sql SQL_CONNECTION_STRING --chart --session $(session) --profile ${{ parameters.profile }} --no-metadata --no-measurements --load.variables.warmup ${{ parameters.warmup }} --load.variables.duration ${{ parameters.duration }} ${{ s.arguments }} ${{ payload.arguments }} ${{ serverScheme.arguments }} ${{ downstreamScheme.arguments }} ${{ serverHttpProtocol.arguments }} ${{ downstreamHttpProtocol.arguments }}" ]
              }
