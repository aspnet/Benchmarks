# Proxy scenarios

parameters:
- name: profile
  type: string
  default: ''
- name: warmup
  type: number
  default: 5
- name: duration
  type: number
  default: 15
- name: connection
  type: string
  default: ''

# Scenarios
- name: scenarios 
  type: object
  default: 
  - displayName: Baseline
    arguments: --scenario proxy-baseline    $(proxyJobs) --property proxy=none
  - displayName: HttpClient
    arguments: --scenario proxy-httpclient  $(proxyJobs) --property proxy=httpclient --application.channel edge --application.framework net5.0
    supportsServerHttps: true
    supportsServerHttp2: true
  - displayName: NGinx
    arguments: --scenario proxy-nginx       $(proxyJobs) --property proxy=nginx
  - displayName: HAProxy
    arguments: --scenario proxy-haproxy     $(proxyJobs) --property proxy=haproxy
  - displayName: Envoy
    arguments: --scenario proxy-envoy       $(proxyJobs) --property proxy=envoy
  - displayName: YARP
    arguments: --scenario proxy-yarp        $(proxyJobs)  --property proxy=yarp --application.channel edge --application.framework net5.0
    supportsServerHttps: true
    supportsServerHttp2: true

- name: payloads
  type: object
  default:
    - displayName: "10 B"
      arguments: --variable path=/?s=10 --property payload=10
    - displayName: "100 B"
      arguments: --variable path=/?s=100 --property payload=100
    - displayName: "1 KB"
      arguments: --variable path=/?s=1024 --property payload=1024
    - displayName: "10 KB"
      arguments: --variable path=/?s=10240 --property payload=10240
    - displayName: "100 KB"
      arguments: --variable path=/?s=102400 --property payload=102400

- name: serverSchemes
  type: object
  default:
    - displayName: http
      arguments: --variable serverScheme=http --property serverScheme=http
    - displayName: https
      arguments: --variable serverScheme=https --property serverScheme=https

- name: downstreamSchemes
  type: object
  default:
    - displayName: http
      arguments: --variable downstreamScheme=http --property downstreamScheme=http
    - displayName: https
      arguments: --variable downstreamScheme=https --property downstreamScheme=https

- name: serverHttpProtocols
  type: object
  default:
    - displayName: HTTP/1.1
      arguments: --variable load.variables.transport http1 --property serverHttpProtocol=HTTP/1.1
    - displayName: HTTP/2
      arguments: --variable load.variables.transport http2 --property serverHttpProtocol=HTTP/2

- name: downstreamHttpProtocols
  type: object
  default:
    - displayName: HTTP/1.1
      arguments: --variable downstream.variables.httpProtocol http1 --property serverHttpProtocol=HTTP/1.1
    - displayName: HTTP/2
      arguments: --variable downstream.variables.httpProtocol http2 --property serverHttpProtocol=HTTP/2

steps:
- ${{ each s in parameters.scenarios }}:
  - ${{ each payload in parameters.payloads }}:
    - ${{ each serverScheme in parameters.serverSchemes }}:
      - ${{ each downstreamScheme in parameters.downstreamSchemes }}:
        - ${{ each serverHttpProtocol in parameters.serverHttpProtocols }}:
          - ${{ each downstreamHttpProtocol in parameters.downstreamHttpProtocols }}:
            - ${{ if and(or(not(eq(serverScheme.displayName, 'https')), s.supportsServerHttps), or(not(eq(serverHttpProtocol.displayName, 'HTTP/2')), s.supportsServerHttp2)) }}:
              - ${{ if and(eq(serverScheme.displayName, downstreamScheme.displayName), eq(serverHttpProtocol.displayName, downstreamHttpProtocol.displayName), or(eq(serverScheme.displayName, 'https'), eq(serverHttpProtocol.displayName, 'HTTP/1.1'))) }}:
                - task: PublishToAzureServiceBus@1
                  condition: succeededOrFailed()
                  displayName: ${{ s.displayName }} ${{ payload.displayName }} ${{ serverScheme.displayName }} ${{ serverHttpProtocol.displayName }}
                  inputs:
                    connectedServiceName: ${{ parameters.connection }}
                    waitForCompletion: true
                    messageBody: |
                      {
                        "name": "crank",
                        "args": [ "--table ProxyBenchmarks --sql SQL_CONNECTION_STRING --chart --session $(session) --profile ${{ parameters.profile }} --no-metadata --no-measurements --load.variables.warmup ${{ parameters.warmup }} --load.variables.duration ${{ parameters.duration }} ${{ s.arguments }} ${{ payload.arguments }} ${{ serverScheme.arguments }} ${{ downstreamScheme.arguments }} ${{ serverHttpProtocol.arguments }} ${{ downstreamHttpProtocol.arguments }}" ]
                      }
