# Proxy scenarios

parameters:
- name: arguments
  type: string
  default: ''
- name: connection
  type: string
  default: ''
- name: condition
  type: string
  default: 'true'

# Scenarios
- name: scenarios 
  type: object
  default: 
  - displayName: YARP
    scenario: proxy-yarp
    arguments: $(proxyJobs) --property proxy=yarp --application.framework net8.0
    supportsHttp: true
    supportsServerHttps: true
    supportsServerHttp2: true
    supportsDownstreamHttp2: true
    condition: 'true'
  - displayName: YARP gRPC
    scenario: proxy-yarp-grpc
    arguments: $(proxyGRPCJobs) --property proxy=yarp --application.framework net8.0
    supportsGRPC: true
    condition: 'true'
  - displayName: YARP-net70
    scenario: proxy-yarp
    arguments: $(proxyJobs) --property proxy=yarp-net70 --application.framework net7.0
    supportsHttp: true
    supportsServerHttps: true
    supportsServerHttp2: true
    supportsDownstreamHttp2: true
    condition: Math.round(Date.now() / 43200000) % 4 == 0 # once every 4 half-days
  - displayName: YARP-PGO
    scenario: proxy-yarp
    arguments: $(proxyJobs) --property proxy=yarp-pgo --application.framework net8.0 --application.environmentVariables DOTNET_TieredPGO=1 --application.environmentVariables DOTNET_ReadyToRun=0 --application.environmentVariables DOTNET_TC_QuickJitForLoops=1
    supportsHttp: true
    supportsServerHttps: true
    supportsServerHttp2: true
    supportsDownstreamHttp2: true
    condition: Math.round(Date.now() / 43200000) % 4 == 1 # once every 4 half-days
  - displayName: HttpClient
    scenario: proxy-httpclient
    arguments: $(proxyJobs) --property proxy=httpclient --application.framework net8.0
    supportsHttp: true
    supportsServerHttps: true
    supportsServerHttp2: true
    supportsDownstreamHttp2: true
    condition: Math.round(Date.now() / 43200000) % 4 == 2 # once every 4 half-days
  - displayName: HttpClient-PGO
    scenario: proxy-httpclient
    arguments: $(proxyJobs) --property proxy=httpclient-pgo --application.framework net8.0 --application.environmentVariables DOTNET_TieredPGO=1 --application.environmentVariables DOTNET_ReadyToRun=0 --application.environmentVariables DOTNET_TC_QuickJitForLoops=1
    supportsHttp: true
    supportsServerHttps: true
    supportsServerHttp2: true
    supportsDownstreamHttp2: true
    condition: Math.round(Date.now() / 43200000) % 4 == 3 # once every 4 half-days
  - displayName: NGinx
    scenario: proxy-nginx
    arguments: $(proxyJobs) --property proxy=nginx --variable warmup=0
    supportsHttp: true
    supportsServerHttps: true
    supportsServerHttp2: true
    condition: Math.round(Date.now() / 43200000) % 5 == 0 # once every 5 half-days
  - displayName: NGinx gRPC
    scenario: proxy-nginx-grpc
    arguments: $(proxyGRPCJobs) --property proxy=nginx --variable warmup=0
    supportsGRPC: true
    condition: Math.round(Date.now() / 43200000) % 5 == 1 # once every 5 half-days
  - displayName: HAProxy
    scenario: proxy-haproxy
    arguments: $(proxyJobs) --property proxy=haproxy
    supportsHttp: true
    condition: Math.round(Date.now() / 43200000) % 5 == 2 # once every 5 half-days
  - displayName: Envoy
    scenario: proxy-envoy
    arguments: $(proxyJobs) --property proxy=envoy
    supportsHttp: true
    supportsServerHttps: true
    supportsServerHttp2: true
    supportsDownstreamHttp2: true
    condition: Math.round(Date.now() / 43200000) % 5 == 3 # once every 5 half-days
  - displayName: Envoy gRPC
    scenario: proxy-envoy-grpc
    arguments: $(proxyGRPCJobs) --property proxy=envoy
    supportsGRPC: true
    condition: Math.round(Date.now() / 43200000) % 5 == 4 # once every 5 half-days

- name: payloads
  type: object
  default:
    # no headers, no body, responses up to 102400
    - displayName: "0 B - 100 B - No Headers"
      arguments: --variable path=/?s=100 --property payload=100 --property body=0 --property headers=none
    - displayName: "0 B - 1 KB - No Headers"
      arguments: --variable path=/?s=1024 --property payload=1024 --property body=0 --property headers=none
    - displayName: "0 B - 10 KB - No Headers"
      arguments: --variable path=/?s=10240 --property payload=10240 --property body=0 --property headers=none
    - displayName: "0 B - 100 KB - No Headers"
      arguments: --variable path=/?s=102400 --property payload=102400 --property body=0 --property headers=none

    # plaintext headers, no body, 100 B response
    - displayName: "0 B - 100 B - Plaintext Headers"
      arguments: --variable path=/?s=100 --property payload=100 --property body=0 --variable presetHeaders=plaintext --property headers=plaintext

    # no headers, different body sizes, 100 B response
    - displayName: "100 B - 100 B - No Headers"
      arguments: --variable path=/?s=100 --variable bodyFile=https://raw.githubusercontent.com/aspnet/Benchmarks/main/scenarios/assets/100B.txt --variable verb=POST --property payload=100 --property body=100 --property headers=none
    - displayName: "1 KB - 100 B - No Headers"
      arguments: --variable path=/?s=100 --variable bodyFile=https://raw.githubusercontent.com/aspnet/Benchmarks/main/scenarios/assets/1KB.txt --variable verb=POST --property payload=100 --property body=1024 --property headers=none
    - displayName: "10 KB - 100 B - No Headers"
      arguments: --variable path=/?s=100 --variable bodyFile=https://raw.githubusercontent.com/aspnet/Benchmarks/main/scenarios/assets/10KB.txt --variable verb=POST --property payload=100 --property body=10240 --property headers=none
    - displayName: "100 KB - 100 B - No Headers"
      arguments: --variable path=/?s=100 --variable bodyFile=https://raw.githubusercontent.com/aspnet/Benchmarks/main/scenarios/assets/100KB.txt --variable verb=POST --property payload=100 --property body=102400 --property headers=none

- name: protocols
  type: object
  default:
    - displayName: http - http
      arguments: --variable serverScheme=http --property serverProtocol=http --property downstreamProtocol=http
      requiresHttp: true
    - displayName: https - http
      arguments: --variable serverScheme=https --variable serverScheme=https --property serverProtocol=https --property downstreamProtocol=http
      requiresServerHttps: true
    - displayName: https - https
      arguments: --variable serverScheme=https --variable serverScheme=https --variable downstreamScheme=https --property serverProtocol=https --property downstreamProtocol=https
      requiresServerHttps: true
    - displayName: http - h2
      arguments: --variable serverScheme=http --variable downstreamScheme=https --variable downstreamProtocol=http2 --property serverProtocol=http --property downstreamProtocol=h2
      requiresDownstreamHttp2: true
    - displayName: h2 - http
      arguments: --variable serverScheme=https --variable serverProtocol=http2 --property serverProtocol=h2 --property downstreamProtocol=http
      scenarioSuffix: -h2load
    - displayName: h2 - h2
      arguments: --variable serverScheme=https --variable serverProtocol=http2 --variable downstreamScheme=https --variable downstreamProtocol=http2 --property serverProtocol=h2 --property downstreamProtocol=h2
      requiresServerHttp2: true
      requiresDownstreamHttp2: true
      scenarioSuffix: -h2load
    - displayName: gRPC (h2 - h2)
      arguments: --variable connections=1 --variable streams=100 --variable serverScheme=https --variable serverProtocol=grpc --variable downstreamScheme=https --variable downstreamProtocol=grpc --property serverProtocol=grpc --property downstreamProtocol=grpc
      requiresGRPC: true
# We need to find a way to tell the proxy that the downstream server is expecting h2c and not http/1.1
#    - displayName: h2 - h2c
#      arguments: --variable serverScheme=https --variable downstreamScheme=http --load.variables.transport http2 --downstream.variables.httpProtocol http2 --property serverProtocol=http --property downstreamProtocol=h2c
#      requiresServerHttps: false
#      scenarioSuffix: -h2load

steps:
- ${{ each s in parameters.scenarios }}:
  - ${{ each payload in parameters.payloads }}:
    - ${{ each protocol in parameters.protocols }}:
      # doesn't (requiresServerHttps or supportsServerHttps) AND (doesn't requiresServerHttp2 or supportsServerHttp2)
      - ${{ if and( not( protocol.requiresGRPC), or( not( protocol.requiresHttp), s.supportsHttp), or( not( protocol.requiresServerHttps), s.supportsServerHttps), or( ne( protocol.scenarioSuffix, '-h2load'), s.supportsServerHttp2), or( not( protocol.requiresDownstreamHttp2), s.supportsDownstreamHttp2) ) }}:
        - task: PublishToAzureServiceBus@1
          condition: succeededOrFailed()
          timeoutInMinutes: 5
          displayName: ${{ s.displayName }} ${{ payload.displayName }} ${{ protocol.displayName }}
          inputs:
            connectedServiceName: ${{ parameters.connection }}
            waitForCompletion: true
            useDataContractSerializer: "false"
            messageBody: |
              {
                "condition": "(${{ parameters.condition }}) && (${{ s.condition }})",
                "timeout": "00:03:00",
                "name": "crank",
                "args": [ "--command-line-property --table ProxyBenchmarks --sql SQL_CONNECTION_STRING --chart --session $(session) ${{ parameters.arguments }} --no-metadata --no-measurements --downstream.options.reuseBuild true --scenario ${{ s.scenario }}${{ protocol.scenarioSuffix }} ${{ s.arguments }} ${{ payload.arguments }} ${{ protocol.arguments }} --description \"${{ s.displayName }} ${{ payload.displayName }} ${{ protocol.displayName }} $(System.JobDisplayName)\"" ]
              }

# GRPC only: requiresServerGRPC and supportsGRPC
# For gRPC, only run one payload "0 B - 100 B - No Headers" because the payload arguments are not applicable here

- ${{ each s in parameters.scenarios }}:
  - ${{ each payload in parameters.payloads }}:
    - ${{ each protocol in parameters.protocols }}:
      - ${{ if and( protocol.requiresGRPC, s.supportsGRPC, eq( payload.displayName, '0 B - 100 B - No Headers' ) ) }}:
        - task: PublishToAzureServiceBus@1
          condition: succeededOrFailed()
          timeoutInMinutes: 5
          displayName: ${{ s.displayName }} ${{ payload.displayName }} ${{ protocol.displayName }}
          inputs:
            connectedServiceName: ${{ parameters.connection }}
            waitForCompletion: true
            useDataContractSerializer: "false"
            messageBody: |
              {
                "condition": "(${{ parameters.condition }}) && (${{ s.condition }})",
                "timeout": "00:03:00",
                "name": "crank",
                "args": [ "--command-line-property --table ProxyBenchmarks --sql SQL_CONNECTION_STRING --chart --session $(session) ${{ parameters.arguments }} --no-metadata --no-measurements --downstream.options.reuseBuild true --scenario ${{ s.scenario }}${{ protocol.scenarioSuffix }} ${{ s.arguments }} ${{ payload.arguments }} ${{ protocol.arguments }} --property rate=0 --property cpu=0 --description \"${{ s.displayName }} ${{ payload.displayName }} ${{ protocol.displayName }} $(System.JobDisplayName)\"" ]
              }
