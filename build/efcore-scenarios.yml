# EF Core micro benchmarks

parameters:
- name: server # the url of the server agent service, e.g. http://asp-perf-lin:5001
  type: string
  default: ''
- name: client # the url of the client agent service, e.g. http://asp-perf-load:5002
  type: string
  default: ''
- name: connection
  type: string
  default: ''

# Scenarios
- name: scenarios 
  type: object
  default: 

# List of scenarios

    - displayName: AddDataVariations
      arguments: $(efcoreJobs) --benchmarkdotnet:*AddDataVariations* -n Sqlite --project-file benchmark/EFCore.Sqlite.Benchmarks/EFCore.Sqlite.Benchmarks.csproj
    - displayName: ExistingDataVariations
      arguments: $(efcoreJobs) --benchmarkdotnet:*ExistingDataVariations* -n Sqlite --project-file benchmark/EFCore.Sqlite.Benchmarks/EFCore.Sqlite.Benchmarks.csproj
    - displayName: ChildVariations
      arguments: $(efcoreJobs) --benchmarkdotnet:*ChildVariations* -n Sqlite --project-file benchmark/EFCore.Sqlite.Benchmarks/EFCore.Sqlite.Benchmarks.csproj
    - displayName: Delete
      arguments: $(efcoreJobs) --benchmarkdotnet:*Delete* -n Sqlite --project-file benchmark/EFCore.Sqlite.Benchmarks/EFCore.Sqlite.Benchmarks.csproj
    - displayName: ExistingDataVariations
      arguments: $(efcoreJobs) --benchmarkdotnet:*ExistingDataVariations* -n Sqlite --project-file benchmark/EFCore.Sqlite.Benchmarks/EFCore.Sqlite.Benchmarks.csproj
    - displayName: FuncletizationSqliteTests
      arguments: $(efcoreJobs) --benchmarkdotnet:*FuncletizationSqliteTests* -n Sqlite --project-file benchmark/EFCore.Sqlite.Benchmarks/EFCore.Sqlite.Benchmarks.csproj
    - displayName: InitializationSqliteTests
      arguments: $(efcoreJobs) --benchmarkdotnet:*InitializationSqliteTests* -n Sqlite --project-file benchmark/EFCore.Sqlite.Benchmarks/EFCore.Sqlite.Benchmarks.csproj
    - displayName: Insert
      arguments: $(efcoreJobs) --benchmarkdotnet:*Insert* -n Sqlite --project-file benchmark/EFCore.Sqlite.Benchmarks/EFCore.Sqlite.Benchmarks.csproj
    - displayName: Mixed
      arguments: $(efcoreJobs) --benchmarkdotnet:*Mixed* -n Sqlite --project-file benchmark/EFCore.Sqlite.Benchmarks/EFCore.Sqlite.Benchmarks.csproj
    - displayName: ParentVariations
      arguments: $(efcoreJobs) --benchmarkdotnet:*ParentVariations* -n Sqlite --project-file benchmark/EFCore.Sqlite.Benchmarks/EFCore.Sqlite.Benchmarks.csproj
    - displayName: RawSqlQuerySqliteTests
      arguments: $(efcoreJobs) --benchmarkdotnet:*RawSqlQuerySqliteTests* -n Sqlite --project-file benchmark/EFCore.Sqlite.Benchmarks/EFCore.Sqlite.Benchmarks.csproj
    - displayName: SimpleQuerySqliteTests
      arguments: $(efcoreJobs) --benchmarkdotnet:*SimpleQuerySqliteTests* -n Sqlite --project-file benchmark/EFCore.Sqlite.Benchmarks/EFCore.Sqlite.Benchmarks.csproj
    - displayName: SimpleQuerySqliteTests
      arguments: $(efcoreJobs) --benchmarkdotnet:*NavigationsQuerySqliteTests* -n Sqlite --project-file benchmark/EFCore.Sqlite.Benchmarks/EFCore.Sqlite.Benchmarks.csproj
    - displayName: NavigationsQuerySqliteTests
      arguments: $(efcoreJobs) --benchmarkdotnet:*QueryCompilationSqliteTests* -n Sqlite --project-file benchmark/EFCore.Sqlite.Benchmarks/EFCore.Sqlite.Benchmarks.csproj
    - displayName: QueryCompilationSqliteTests
      arguments: $(efcoreJobs) --benchmarkdotnet:*Update* -n Sqlite --project-file benchmark/EFCore.Sqlite.Benchmarks/EFCore.Sqlite.Benchmarks.csproj

steps:
- ${{ each s in parameters.scenarios }}:
  - task: PublishToAzureServiceBus@1
    condition: always()
    timeoutInMinutes: 30 # some micro benchmarks can run that long
    displayName: ${{ s.displayName }}
    inputs:
      azureSubscription: ${{ parameters.connection }}
      waitForCompletion: true
      messageBody: |
        {
          "name": "benchmarksdriver",
          "args": [ "${{ s.arguments }} --server ${{ parameters.server }} --client ${{ parameters.client }} --session $(session) --table EFCoreBenchmarks --sql SQL_CONNECTION_STRING" ]
        }