# Proxy scenarios

parameters:
- name: arguments
  type: string
  default: ''
- name: connection
  type: string
  default: ''
- name: condition
  type: string
  default: 'true'

# Scenarios
- name: scenarios
  type: object
  default:
  # JSON
  - displayName: Json Mvc
    arguments: --scenario MvcJson $(mvcJobs) --property scenario=MvcJson
  - displayName: Json Mvc (NewtonSoft)
    arguments: --scenario MvcJsonNet $(mvcJobs) --property scenario=MvcJsonNet
  - displayName: Json Mvc (2KB)
    arguments: --scenario MvcJson2k $(mvcJobs) --property scenario=MvcJson2k
  - displayName: Json Mvc (NewtonSoft, 2KB)
    arguments: --scenario MvcJsonNet2k $(mvcJobs) --property scenario=MvcJsonNet2k
  - displayName: Json Mvc Input (2KB)
    arguments: --scenario MvcJsonInput2k $(mvcJobs) --property scenario=MvcJsonInput2k
  - displayName: Json Mvc Input (NewtonSoft, 2KB)
    arguments: --scenario MvcJsonNetInput2k $(mvcJobs) --property scenario=MvcJsonNetInput2k
  - displayName: Json Mvc (60KB)
    arguments: --scenario MvcJsonOutput60k $(mvcJobs) --property scenario=MvcJsonOutput60k
  - displayName: Json Mvc (NewtonSoft, 60KB)
    arguments: --scenario MvcJsonNetOutput60k $(mvcJobs) --property scenario=MvcJsonNetOutput60k
  - displayName: Json Mvc Input (60KB)
    arguments: --scenario MvcJsonInput60k $(mvcJobs) --property scenario=MvcJsonInput60k
  - displayName: Json Mvc Input (NewtonSoft, 60KB)
    arguments: --scenario MvcJsonNetInput60k $(mvcJobs) --property scenario=MvcJsonNetInput60k
  - displayName: Json Mvc Input (2MB)
    arguments: --scenario MvcJsonInput2M $(mvcJobs) --property scenario=MvcJsonInput2M
  - displayName: Json Mvc Input (NewtonSoft, 2MB)
    arguments: --scenario MvcJsonNetInput2M $(mvcJobs) --property scenario=MvcJsonNetInput2M
  - displayName: Json Mvc (2MB)
    arguments: --scenario MvcJsonOutput2M $(mvcJobs) --property scenario=MvcJsonOutput2M
  - displayName: Json Mvc (NewtonSoft, 2M)
    arguments: --scenario MvcJsonNetOutput2M $(mvcJobs) --property scenario=MvcJsonNetOutput2M
  - displayName: MapAction Echo Todo
    arguments: --scenario MapActionEchoTodo $(mvcJobs) --property scenario=MapActionEchoTodo

  # Forms
  - displayName: MapAction Echo Todo (Form)
    arguments: --scenario MapActionEchoTodoForm $(mvcJobs) --property scenario=MapActionEchoTodoForm

  # CRUD API
  - displayName: API return collection data
    arguments: --scenario ApiCrudListProducts $(crudApiJobs) --property scenario=ApiCrudListProducts
  - displayName: API return element details
    arguments: --scenario ApiCrudGetProductDetails $(crudApiJobs) --property scenario=ApiCrudGetProductDetails
  - displayName: API add new element
    arguments: --scenario ApiCrudAddProduct $(crudApiJobs) --property scenario=ApiCrudAddProduct
  - displayName: API update existing element
    arguments: --scenario ApiCrudUpdateProduct $(crudApiJobs) --property scenario=ApiCrudUpdateProduct
  - displayName: API remove existing element
    arguments: --scenario ApiCrudDeleteProduct $(crudApiJobs) --property scenario=ApiCrudDeleteProduct

  # CRUD API CERT AUTH
  - displayName: API return collection data (CERT)
    arguments: --scenario ApiCrudListProducts $(crudApiCertJobs) --property scenario=ApiCrudListProductsCertAuth
  - displayName: plaintext (CERT)
    arguments: --scenario NoMvcAuth $(crudApiCertJobs) --property scenario=PlaintextRawCert

  # CRUD API JWT AUTH
  - displayName: API return collection data (JWT)
    arguments: --scenario ApiCrudListProducts $(crudApiJwtJobs) --property scenario=ApiCrudListProductsJwtAuth
  - displayName: plaintext (JWT)
    arguments: --scenario NoMvcAuth $(crudApiJwtJobs) --property scenario=PlaintextRawJwt
  - displayName: plaintext (No Auth)
    arguments: --scenario NoMvcNoAuth $(crudApiJwtJobs) --property scenario=PlaintextRawNoAuth

# Orchard Core

  - displayName: Orchard - About - PostgresQL
    arguments: --scenario about-postgresql $(orchardJobs) --property scenario=OrchardAboutPostgresQL --property protocol=http

  - displayName: Orchard - About - Sqlite
    arguments: --scenario about-sqlite $(orchardJobs) --property scenario=OrchardAboutSqlite --property protocol=http

steps:
  - ${{ each s in parameters.scenarios }}:
    - task: PublishToAzureServiceBus@1
      condition: succeededOrFailed()
      displayName: ${{ s.displayName }}
      inputs:
        connectedServiceName: ${{ parameters.connection }}
        waitForCompletion: true
        useDataContractSerializer: "false"
        messageBody: |
          {
            "name": "crank",
            "condition": "(${{ parameters.condition }})",
            "retries": 1,
            "args": [ "${{ s.arguments }} $(azureProfile) ${{ parameters.arguments }} --config https://raw.githubusercontent.com/aspnet/Benchmarks/main/scenarios/steadystate.profile.yml --application.framework net8.0 --application.options.collectCounters true --application.collectDependencies true --no-metadata --no-measurements --session $(session) --description \"${{ s.displayName }} $(System.JobDisplayName)\" --property buildId=\"$(buildId)\" --property buildNumber=\"$(buildNumber)\" --command-line-property --table MvcBenchmarks --sql SQL_CONNECTION_STRING --chart" ]
          }


