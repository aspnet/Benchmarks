parameters:
- name: arguments
  type: string
  default: ''
- name: connection
  type: string
  default: ''
- name: condition
  type: string
  default: 'true'

# Scenarios
- name: scenarios
  type: object
  default:

# Platform

  - displayName: Plaintext Platform
    arguments: --scenario plaintext $(platformJobs) --property scenario=PlaintextPlatform --property protocol=http
  - displayName: Json Platform
    arguments: --scenario json $(platformJobs) --property scenario=JsonPlatform --property protocol=http
  - displayName: Plaintext Platform Inline
    arguments: --scenario plaintext $(platformJobs) --application.environmentVariables DOTNET_SYSTEM_NET_SOCKETS_INLINE_COMPLETIONS=1 --property scenario=PlaintextPlatformInline --property protocol=http
  - displayName: Json Platform Inline
    arguments: --scenario json $(platformJobs) --application.environmentVariables DOTNET_SYSTEM_NET_SOCKETS_INLINE_COMPLETIONS=1 --property scenario=JsonPlatformInline --property protocol=http

# Plaintext

  - displayName: Plaintext
    arguments: --scenario plaintext $(plaintextJobs) --property scenario=Plaintext --property protocol=http
  - displayName: Plaintext Query String
    arguments: --scenario plaintext $(plaintextJobs) --property scenario=PlaintextQueryString --property protocol=http --variable path=/plaintext?query1=lorem&query2=ipsum&query3=dolor%20est
  - displayName: Plaintext Mvc
    arguments: --scenario mvc $(plaintextJobs) --property scenario=PlaintextMvc --property protocol=http
  - displayName: Plaintext MapAction
    arguments: --scenario mapaction $(plaintextJobs) --property scenario=PlaintextMapAction --property protocol=http
  - displayName: Plaintext Minimal APIs
    arguments: --scenario plaintext $(minimalJobs) --property scenario=PlaintextMinimalApis --property protocol=http
  - displayName: Plaintext Endpoint
    arguments: --scenario endpoint $(plaintextJobs) --property scenario=PlaintextEndpoint --property protocol=http
  - displayName: Plaintext (No Filters)
    arguments: --scenario plainTextSansFilter $(plaintextJobs) --property scenario=PlaintextWithParametersNoFilter --property protocol=http
  - displayName: Plaintext (Empty Filters)
    arguments: --scenario plainTextEmptyFilter $(plaintextJobs) --property scenario=PlaintextWithParametersEmptyFilter --property protocol=http
  - displayName: Plaintext (Empty Filters, No Parameters)
    arguments: --scenario plainTextNoParamsEmptyFilter $(plaintextJobs) --property scenario=PlaintextNoParametersEmptyFilter --property protocol=http
  - displayName: Plaintext (With Filters)
    arguments: --scenario plainTextWithFilter $(plaintextJobs) --property scenario=PlaintextWithParameterstWithFilter --property protocol=http
  - displayName: Plaintext Connection Close
    arguments: --scenario connectionclose $(plaintextJobs) --property scenario=ConnectionClose --property protocol=http --variable connections=32 --property connections=32 
  - displayName: Plaintext Connection Close Https
    arguments: --scenario connectionclosehttps $(plaintextJobs) --property scenario=ConnectionCloseHttps --property protocol=https --variable connections=32 --property connections=32
  - displayName: Plaintext Connection Close HttpSys
    arguments: --scenario connectionclose $(plaintextJobs) --property scenario=ConnectionCloseHttpSys --property protocol=http --variable connections=32 --property connections=32 --variable server=HttpSys --application.options.requiredOperatingSystem windows
  - displayName: Plaintext Connection Close Https HttpSys
    arguments: --scenario connectionclosehttps $(plaintextJobs) --property scenario=ConnectionCloseHttpsHttpSys --property protocol=https --variable connections=32 --property connections=32 --variable server=HttpSys --application.options.requiredOperatingSystem windows

# Json

  - displayName: Json
    arguments: --scenario json $(jsonJobs) --property scenario=Json --property protocol=http
  - displayName: Json HttpSys
    arguments: --scenario json $(jsonJobs) --property protocol=http --property scenario=JsonHttpSys --variable server=HttpSys --application.options.requiredOperatingSystem windows
  - displayName: Json IIS InProc
    arguments: --scenario json $(jsonJobs) --property protocol=http --property scenario=JsonIISInProc --variable server=IISInProcess --application.WebHost IISInProcess --application.options.requiredOperatingSystem windows
  - displayName: Json IIS OutOfProc
    arguments: --scenario json $(jsonJobs) --property protocol=http --property scenario=JsonIISOutOfProc --variable server=IISOutOfProcess --application.WebHost IISOutOfProcess --application.options.requiredOperatingSystem windows
  - displayName: Json Https
    arguments: --scenario https $(jsonJobs) --property scenario=JsonHttps --property protocol=https
  - displayName: Json Https HttpSys
    arguments: --scenario https $(jsonJobs) --property scenario=JsonHttpsHttpSys --property protocol=https --variable server=HttpSys --application.options.requiredOperatingSystem windows
  - displayName: Json Https IIS InProc
    arguments: --scenario https $(jsonJobs) --property protocol=https --property scenario=JsonHttpsIISInProc --variable server=IISInProcess --application.WebHost IISInProcess --application.options.requiredOperatingSystem windows
  - displayName: Json Https IIS OutOfProc
    arguments: --scenario https $(jsonJobs) --property protocol=https --property scenario=JsonHttpsIISOutOfProc --variable server=IISOutOfProcess --application.WebHost IISOutOfProcess --application.options.requiredOperatingSystem windows
  - displayName: Json Crossgen2
    arguments: --scenario json $(jsonJobs) --property scenario=JsonCrossgen2 --property protocol=http --application.buildArguments \"/p:PublishReadyToRun=true /p:PublishReadyToRunUseCrossgen2=true \" --application.options.requiredOperatingSystem windows
  - displayName: Json Mvc
    arguments: --scenario mvc $(jsonJobs) --property scenario=JsonMvc --property protocol=http
  - displayName: Json MapAction
    arguments: --scenario mapaction $(jsonJobs) --property scenario=JsonMapAction --property protocol=http
  - displayName: Json Minimal APIs
    arguments: --scenario json $(minimalJobs) --property scenario=JsonMinimalApis --property protocol=http

steps:
- ${{ each s in parameters.scenarios }}:
  - task: PublishToAzureServiceBus@1
    displayName: "${{ s.displayName }}"
    condition: succeededOrFailed()
    timeoutInMinutes: 10
    inputs:
      connectedServiceName: ${{ parameters.connection }}
      waitForCompletion: true
      useDataContractSerializer: "false"
      messageBody: |
        {
          "name": "crank",
          "condition": "(${{ parameters.condition }})",
          "retries": 1,
          "args": [ "${{ s.arguments }} $(azureProfile) --config https://raw.githubusercontent.com/aspnet/Benchmarks/main/scenarios/steadystate.profile.yml --application.framework net9.0 --application.collectDependencies true ${{ parameters.arguments }} --application.options.collectCounters true --no-metadata --no-measurements --load.options.reuseBuild true --session $(session) --description \"${{ s.displayName }} $(System.JobDisplayName)\" --property buildId=\"$(buildId)\" --property buildNumber=\"$(buildNumber)\" --command-line-property --table TrendBenchmarks --sql SQL_CONNECTION_STRING --chart" ]
        }
