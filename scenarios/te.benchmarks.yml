imports:
  - https://raw.githubusercontent.com/dotnet/crank/main/src/Microsoft.Crank.Jobs.Wrk/wrk.yml
  - https://raw.githubusercontent.com/dotnet/crank/main/src/Microsoft.Crank.Jobs.Bombardier/bombardier.yml
  - https://github.com/aspnet/Benchmarks/blob/main/scenarios/aspnet.profiles.yml?raw=true

jobs:


  aspnetcore:
    source:
      repository: https://github.com/TechEmpower/FrameworkBenchmarks.git
      branchOrCommit: master
      dockerFile: frameworks/CSharp/aspnetcore/aspnetcore.dockerfile
      dockerImageName: aspnetcore
      dockerContextDirectory: frameworks/CSharp/aspnetcore/
    readyStateText: Application started
    arguments: --add-host="tfb-database:{{databaseServer}}"
    noClean: true

  nodejs:
    source:
      repository: https://github.com/TechEmpower/FrameworkBenchmarks.git
      branchOrCommit: master
      dockerFile: frameworks/JavaScript/nodejs/nodejs.dockerfile
      dockerImageName: nodejs
      dockerContextDirectory: frameworks/JavaScript/nodejs/
    readyStateText: NodeJS worker listening
    arguments: --add-host="tfb-database:{{databaseServer}}"
    noClean: true

  bun:
    source:
      repository: https://github.com/TechEmpower/FrameworkBenchmarks.git
      branchOrCommit: master
      dockerFile: frameworks/TypeScript/bun/bun.dockerfile
      dockerImageName: bun
      dockerContextDirectory: frameworks/TypeScript/bun/
    readyStateText: Listening
#    arguments: --add-host="tfb-database:{{databaseServer}}"
    noClean: true

  express:
    source:
      repository: https://github.com/TechEmpower/FrameworkBenchmarks.git
      branchOrCommit: master
      dockerFile: frameworks/JavaScript/express/express.dockerfile
      dockerImageName: express
      dockerContextDirectory: frameworks/JavaScript/express/
    readyStateText: is running
    arguments: --add-host="tfb-database:{{databaseServer}}"
    noClean: true

  express_postgresql:
    source:
      repository: https://github.com/TechEmpower/FrameworkBenchmarks.git
      branchOrCommit: master
      dockerFile: frameworks/JavaScript/express/express-postgres.dockerfile
      dockerImageName: express_postgres
      dockerContextDirectory: frameworks/JavaScript/express/
    readyStateText: listening
    arguments: --add-host="tfb-database:{{databaseServer}}"
    noClean: true

  gin:
    source:
      repository: https://github.com/TechEmpower/FrameworkBenchmarks.git
      branchOrCommit: master
      dockerFile: frameworks/Go/gin/gin.dockerfile
      dockerImageName: gin
      dockerContextDirectory: frameworks/Go/gin/
    readyStateText: Listening
    port: 8080 # used to poll the application to detect startup
    arguments: --add-host="tfb-database:{{databaseServer}}"
    noClean: true

  actix_default: # json and plaintext scenarios
    source:
      repository: https://github.com/sebastienros/FrameworkBenchmarks.git
      branchOrCommit: sebros/actix
      dockerFile: frameworks/Rust/actix/actix.dockerfile
      dockerImageName: actix_default
      dockerContextDirectory: frameworks/Rust/actix/
    readyStateText: Started http server
    arguments: --add-host="tfb-database:{{databaseServer}}"
    noClean: true

  actix_http: # db scenarios are in another image
    source:
      repository: https://github.com/sebastienros/FrameworkBenchmarks.git
      branchOrCommit: sebros/actix
      dockerFile: frameworks/Rust/actix/actix-http.dockerfile
      dockerImageName: actix_http
      dockerContextDirectory: frameworks/Rust/actix/
    readyStateText: Starting http server
    arguments: --add-host="tfb-database:{{databaseServer}}"
    noClean: true

  xitca:
    source:
      repository: https://github.com/TechEmpower/FrameworkBenchmarks.git
      branchOrCommit: master
      dockerFile: frameworks/Rust/xitca-web/xitca-web.dockerfile
      dockerImageName: xitca
      dockerContextDirectory: frameworks/Rust/xitca-web/
    # readyStateText: Starting http server
    port: 8080 # used to poll the application to detect startup
    arguments: --add-host="tfb-database:{{databaseServer}}"
    noClean: true

  fasthttp:
    source:
      repository: https://github.com/TechEmpower/FrameworkBenchmarks.git
      branchOrCommit: master
      dockerFile: frameworks/Go/fasthttp/fasthttp-prefork.dockerfile
      dockerImageName: fasthttp_prefork
      dockerContextDirectory: frameworks/Go/fasthttp/
    arguments: --add-host="tfb-database:{{databaseServer}}"
    # readyStateText:
    port: 8080 # used to poll the application to detect startup
    noClean: true

  drogon:
    source:
      repository: https://github.com/TechEmpower/FrameworkBenchmarks.git
      branchOrCommit: master
      dockerFile: frameworks/C++/drogon/drogon.dockerfile
      dockerContextDirectory: frameworks/C++/drogon/
      dockerImageName: drogon
    # readyStateText: Drogon doesn't log anything
    port: 8080
    arguments: --add-host="tfb-database:{{databaseServer}}"
    noClean: true

  netty:
    source:
      repository: https://github.com/TechEmpower/FrameworkBenchmarks.git
      branchOrCommit: master
      dockerFile: frameworks/Java/netty/netty.dockerfile
      dockerImageName: netty
      dockerContextDirectory: frameworks/Java/netty/
    readyStateText: Httpd started
    arguments: --add-host="tfb-database:{{databaseServer}}"
    noClean: true

  wizzardo:
    source:
      repository: https://github.com/TechEmpower/FrameworkBenchmarks.git
      branchOrCommit: master
      dockerFile: frameworks/Java/wizzardo-http/wizzardo-http.dockerfile
      dockerImageName: wizzardo
      dockerContextDirectory: frameworks/Java/wizzardo-http/
    arguments: --add-host="tfb-database:{{databaseServer}}"
    noClean: true

  spring:
    source:
      repository: https://github.com/TechEmpower/FrameworkBenchmarks.git
      branchOrCommit: master
      dockerFile: frameworks/Java/spring/spring.dockerfile
      dockerImageName: spring
      dockerContextDirectory: frameworks/Java/spring/
    readyStateText: Application is ready
    arguments: --add-host="tfb-database:{{databaseServer}}"
    noClean: true

  postgresql:
    source:
      repository: https://github.com/TechEmpower/FrameworkBenchmarks.git
      branchOrCommit: master
      dockerFile: toolset/databases/postgres/postgres.dockerfile
      dockerImageName: postgres_te
      dockerContextDirectory: toolset/databases/postgres
    readyStateText: ready to accept connections
    noClean: true

  mysql:
    source:
      repository: https://github.com/TechEmpower/FrameworkBenchmarks.git
      branchOrCommit: master
      dockerFile: toolset/databases/mysql/mysql.dockerfile
      dockerImageName: mysql_te
      dockerContextDirectory: toolset/databases/mysql
    readyStateText: Ready for start up
    noClean: true

scenarios:

# ASP.NET Core (Platform)
  plaintext_aspnetcore:
    application:
      job: aspnetcore
    load:
      job: wrk
      variables:
        presetHeaders: plaintext
        path: /plaintext
        pipeline: 16
        serverPort: 8080

  json_aspnetcore:
    application:
      job: aspnetcore
    load:
      job: wrk
      variables:
        presetHeaders: json
        path: /json
        serverPort: 8080

  fortunes_aspnetcore:
    db:
      job: postgresql
    application:
      job: aspnetcore
    load:
      job: wrk
      variables:
        presetHeaders: html
        path: /fortunes
        serverPort: 8080

  # NodeJS
  plaintext_nodejs:
    db:
      # nodejs image requires mysql to be available
      job: mysql
    application:
      job: nodejs
    load:
      job: wrk
      variables:
        presetHeaders: plaintext
        path: /plaintext
        pipeline: 16
        serverPort: 8080

  json_nodejs:
    db:
      # nodejs image requires mysql to be available
      job: mysql
    application:
      job: nodejs
    load:
      job: wrk
      variables:
        presetHeaders: json
        path: /json
        serverPort: 8080

  fortunes_nodejs:
    db:
      job: postgresql
    application:
      job: nodejs
    load:
      job: wrk
      variables:
        presetHeaders: html
        path: /fortunes
        serverPort: 8080

  # Bun
  plaintext_bun:
    application:
      job: bun
    load:
      job: wrk
      variables:
        presetHeaders: plaintext
        path: /plaintext
        pipeline: 16
        serverPort: 8080

  json_bun:
    application:
      job: bun
    load:
      job: wrk
      variables:
        presetHeaders: json
        path: /json
        serverPort: 8080

  # Express (NodeJS)
  plaintext_express:
    application:
      job: express
    load:
      job: wrk
      variables:
        presetHeaders: plaintext
        path: /plaintext
        pipeline: 16
        serverPort: 8080

  json_express:
    application:
      job: express
    load:
      job: wrk
      variables:
        presetHeaders: json
        path: /json
        serverPort: 8080

  fortunes_express:
    db:
      job: postgresql
    application:
      job: express_postgresql
    load:
      job: wrk
      variables:
        presetHeaders: html
        path: /fortunes
        serverPort: 8080

# Gin (Go)
  plaintext_gin:
    db:
      job: mysql # all gin scenarios require mysql 
    application:
      job: gin
    load:
      job: wrk
      variables:
        presetHeaders: plaintext
        path: /plaintext
        pipeline: 16
        serverPort: 8080

  json_gin:
    db:
      job: mysql # all gin scenarios require mysql
    application:
      job: gin
    load:
      job: wrk
      variables:
        presetHeaders: json
        path: /json
        serverPort: 8080

  fortunes_gin:
    db:
      job: mysql
    application:
      job: gin
    load:
      job: wrk
      variables:
        presetHeaders: html
        path: /fortunes
        serverPort: 8080

  # Actix (Rust)
  plaintext_actix:
    application:
      job: actix_default
    load:
      job: wrk
      variables:
        presetHeaders: plaintext
        path: /plaintext
        pipeline: 16
        serverPort: 8080

  json_actix:
    application:
      job: actix_default
    load:
      job: wrk
      variables:
        presetHeaders: json
        path: /json
        serverPort: 8080

  fortunes_actix:
    db:
      job: postgresql
    application:
      job: actix_http
    load:
      job: wrk
      variables:
        presetHeaders: html
        path: /fortunes
        serverPort: 8080

  # Xitca (Rust)
  plaintext_xitca:
    application:
      job: xitca
    load:
      job: wrk
      variables:
        presetHeaders: plaintext
        path: /plaintext
        pipeline: 16
        serverPort: 8080

  json_xitca:
    application:
      job: xitca
    load:
      job: wrk
      variables:
        presetHeaders: json
        path: /json
        serverPort: 8080

  fortunes_xitca:
    db:
      job: postgresql
    application:
      job: xitca
    load:
      job: wrk
      variables:
        presetHeaders: html
        path: /fortunes
        serverPort: 8080

  # FastHttp (Go)
  plaintext_fasthttp:
    db:
      job: postgresql
    application:
      job: fasthttp
    load:
      job: wrk
      variables:
        presetHeaders: plaintext
        path: /plaintext
        pipeline: 16
        serverPort: 8080

  json_fasthttp:
    db:
      job: postgresql
    application:
      job: fasthttp
    load:
      job: wrk
      variables:
        presetHeaders: json
        path: /json
        serverPort: 8080

  fortunes_fasthttp:
    db:
      job: postgresql
    application:
      job: fasthttp
    load:
      job: wrk
      variables:
        presetHeaders: html
        path: /fortunes
        serverPort: 8080

  # Drogon (C++)
  plaintext_drogon:
    db:
      job: postgresql
    application:
      job: drogon
    load:
      job: wrk
      variables:
        presetHeaders: plaintext
        path: /plaintext
        pipeline: 16
        serverPort: 8080

  json_drogon:
    db:
      job: postgresql
    application:
      job: drogon
    load:
      job: wrk
      variables:
        presetHeaders: json
        path: /json
        serverPort: 8080

  fortunes_drogon:
    db:
      job: postgresql
    application:
      job: drogon
    load:
      job: wrk
      variables:
        presetHeaders: html
        path: /fortunes
        serverPort: 8080

  # Netty (Java)
  plaintext_netty:
    application:
      job: netty
    load:
      job: wrk
      variables:
        presetHeaders: plaintext
        path: /plaintext
        pipeline: 16
        serverPort: 8080

  json_netty:
    application:
      job: netty
    load:
      job: wrk
      variables:
        presetHeaders: json
        path: /json
        serverPort: 8080

  # Wizzardo (Java)
  plaintext_wizzardo:
    db:
      job: postgresql
    application:
      job: wizzardo
    load:
      job: wrk
      variables:
        presetHeaders: plaintext
        path: /plaintext
        pipeline: 16
        serverPort: 8080
        connections: 1024

  json_wizzardo:
    db:
      job: postgresql
    application:
      job: wizzardo
    load:
      job: wrk
      variables:
        presetHeaders: json
        path: /json
        serverPort: 8080
        connections: 512

  fortunes_wizzardo:
    db:
      job: postgresql
    application:
      job: wizzardo
    load:
      job: wrk
      variables:
        presetHeaders: html
        path: /fortunes
        serverPort: 8080
        connections: 512

  single_query_wizzardo:
    db:
      job: postgresql
    application:
      job: wizzardo
    load:
      job: wrk
      variables:
        presetHeaders: json
        path: /db
        serverPort: 8080
        connections: 512
  
  multiple_queries_wizzardo:
    db:
      job: postgresql
    application:
      job: wizzardo
    load:
      job: wrk
      variables:
        presetHeaders: json
        path: /queries?queries=20
        serverPort: 8080

  updates_wizzardo:
    db:
      job: postgresql
    application:
      job: wizzardo
    load:
      job: wrk
      variables:
        presetHeaders: json
        path: /updates?queries=20
        serverPort: 8080

  cached_queries_wizzardo:
    db:
      job: postgresql
    application:
      job: wizzardo
    load:
      job: wrk
      variables:
        presetHeaders: json
        path: /cached-worlds?count=100
        serverPort: 8080

  # Spring (Java)
  plaintext_spring:
    db:
      job: postgresql
    application:
      job: spring
    load:
      job: wrk
      variables:
        presetHeaders: plaintext
        path: /plaintext
        pipeline: 16
        serverPort: 8080
        connections: 1024

  json_spring:
    db:
      job: postgresql
    application:
      job: spring
    load:
      job: wrk
      variables:
        presetHeaders: json
        path: /json
        serverPort: 8080
        connections: 512

  fortunes_spring:
    db:
      job: postgresql
    application:
      job: spring
    load:
      job: wrk
      variables:
        presetHeaders: html
        path: /fortunes
        serverPort: 8080
        connections: 512

  single_query_spring:
    db:
      job: postgresql
    application:
      job: wizzardo
    load:
      job: wrk
      variables:
        presetHeaders: json
        path: /db
        serverPort: 8080
        connections: 512
  
  multiple_queries_spring:
    db:
      job: postgresql
    application:
      job: spring
    load:
      job: wrk
      variables:
        presetHeaders: json
        path: /queries?queries=20
        serverPort: 8080

  updates_spring:
    db:
      job: postgresql
    application:
      job: spring
    load:
      job: wrk
      variables:
        presetHeaders: json
        path: /updates?queries=20
        serverPort: 8080

