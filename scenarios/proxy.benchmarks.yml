# The scenarios in this file accept the following arguments:
  # --variable serverScheme= [http, https]
  # --variable downstreamScheme= [http, https]
  # --variable serverProtocol= [http, http2]
  # --variable downstreamProtocol= [http, http2]

imports:
  - https://raw.githubusercontent.com/dotnet/crank/main/src/Microsoft.Crank.Jobs.Wrk/wrk.yml
  - https://raw.githubusercontent.com/dotnet/crank/main/src/Microsoft.Crank.Jobs.Wrk2/wrk2.yml
  - https://raw.githubusercontent.com/dotnet/crank/main/src/Microsoft.Crank.Jobs.Bombardier/bombardier.yml
  - https://raw.githubusercontent.com/dotnet/crank/main/src/Microsoft.Crank.Jobs.H2Load/h2load.yml
  - https://raw.githubusercontent.com/aspnet/Benchmarks/main/scenarios/httpclient.benchmarks.yml

variables:
    path: /
    serverScheme: http # http, https
    downstreamScheme: http # http, https
    serverProtocol: http # http, http2
    downstreamProtocol: http # http, http2
    downstreamPort: 8081

jobs:
  # override bombardier transport argument based on the serverProtocol variable
  bombardier:
    variables:
      transport: '{% if serverProtocol == "http2" %}http2{% else %}fasthttp{% endif %}'
      serverPort: 8080

  h2LoadClient:
    variables:
      connections: '{{cores}}'
      threads: '{{cores}}'
      streams: 100
      serverPort: 8080

  httpClient: # Useful for manual debugging
    variables:
      numberOfHttpClients: '{{cores}}'
      concurrencyPerHttpClient: 100
      httpVersion: '{% if serverProtocol == "http2" %}2.0{% else %}1.1{% endif %}'
      serverPort: 8080
      scenario: 'get'
      host: '{{serverAddress}}'
      useHttps: '{{ serverScheme == "https" }}'

  httpclientproxy:
    source:
      repository: https://github.com/aspnet/benchmarks.git
      branchOrCommit: main
      project: src/BenchmarksApps/HttpClient/Proxy/Proxy.csproj
    readyStateText: Application started.
    arguments: '--urls {{serverScheme}}://*:8080 --baseUri {{downstreamScheme}}://{{downstreamAddress}}:{{downstreamPort}}'

  nginxproxy:
    source:
      Repository: https://github.com/aspnet/benchmarks.git
      BranchOrCommit: main
      DockerFile: docker/nginx/nginx.dockerfile
      DockerImageName: nginx-reverseproxy
      DockerContextDirectory: docker/nginx
    environmentVariables:
        DOWNSTREAM_SCHEME: '{{downstreamScheme}}'
        DOWNSTREAM_ADDRESS: '{{downstreamAddress}}'
        DOWNSTREAM_PORT: '{{downstreamPort}}'
        WORKER_PROCESSES: '{{cores}}'
    buildArguments: 
      - SERVER_SCHEME={{serverScheme}}
      - SERVER_PROTOCOL={{serverProtocol}}
    port: 8080

  envoyproxy:
    source:
      Repository: https://github.com/aspnet/benchmarks.git
      BranchOrCommit: main
      DockerFile: docker/envoy/envoy.dockerfile
      DockerImageName: envoy-reverseproxy
      DockerContextDirectory: docker/envoy
    readyStateText: starting workers
    environmentVariables:
        DOWNSTREAM_ADDRESS: '{{downstreamAddress}}'
        DOWNSTREAM_PORT: '{{downstreamPort}}'
    buildArguments: 
      - SERVER_SCHEME={{serverScheme}}
      - SERVER_PROTOCOL={{serverProtocol}}
      - DOWNSTREAM_SCHEME={{downstreamScheme}}
      - DOWNSTREAM_PROTOCOL={{downstreamProtocol}}
    port: 8080

  haproxyproxy:
    source:
      Repository: https://github.com/aspnet/benchmarks.git
      BranchOrCommit: main
      DockerFile: docker/haproxy/haproxy.dockerfile
      DockerImageName: haproxy-reverseproxy
      DockerContextDirectory: docker/haproxy
    environmentVariables:
        DOWNSTREAM_ADDRESS: '{{downstreamAddress}}'
        DOWNSTREAM_PORT: '{{downstreamPort}}'
    port: 8080

  downstream:
    source:
      repository: https://github.com/aspnet/benchmarks.git
      branchOrCommit: main
      project: src/Downstream/Downstream.csproj
    readyStateText: Application started.
    framework: net8.0
    environmentVariables:
      DOTNET_TieredPGO: 1
      DOTNET_ReadyToRun: 0
      DOTNET_TC_QuickJitForLoops: 1
    variables:
      downstreamArguments:
      downstreamPort: 8081
    arguments: '--urls {{downstreamScheme}}://*:{{downstreamPort}} --Kestrel:EndpointDefaults:Protocols {% if downstreamProtocol == "http2" %}http2{% else %}http1{% endif %} {{downstreamArguments}}'

  yarp:
    source:
      repository: https://github.com/microsoft/reverse-proxy.git
      branchOrCommit: main
      project: testassets/BenchmarkApp/BenchmarkApp.csproj
    readyStateText: Application started.
    arguments: '--urls {{serverScheme}}://*:8080 --clusterUrls {{downstreamScheme}}://{{downstreamAddress}}:{{downstreamPort}}'

results:

- name: benchmarks/cpu/raw/90
  measurement: benchmarks/cpu/raw
  description: Cores Usage (90th %)
  format: n0
  aggregate: percentile90
  reduce: max

scenarios:
  proxy-httpclient:
    downstream:
      job: downstream
    application:
      job: httpclientproxy
    load:
      job: bombardier

  proxy-httpclient-h2load:
    downstream:
      job: downstream
    application:
      job: httpclientproxy
    load:
      job: h2LoadClient

  proxy-nginx:
    downstream:
      job: downstream
    application:
      job: nginxproxy
    load:
      job: bombardier

  proxy-nginx-h2load:
    downstream:
      job: downstream
    application:
      job: nginxproxy
    load:
      job: h2LoadClient

  proxy-haproxy:
    downstream:
      job: downstream
    application:
      job: haproxyproxy
    load:
      job: bombardier

  proxy-envoy:
    downstream:
      job: downstream
    application:
      job: envoyproxy
    load:
      job: bombardier

  proxy-envoy-h2load:
    downstream:
      job: downstream
    application:
      job: envoyproxy
    load:
      job: h2LoadClient

  proxy-yarp:
    downstream:
      job: downstream
    application:
      job: yarp
    load:
      job: bombardier

  proxy-yarp-h2load:
    downstream:
      job: downstream
    application:
      job: yarp
    load:
      job: h2LoadClient

profiles:
  aspnet-perf-lin:
    variables:
      serverAddress: 10.0.0.102
      downstreamAddress: 10.0.0.103
      downstreamPort: 8081
      cores: 12
    jobs:
      downstream:
        endpoints: 
          - http://asp-perf-db:5001
      application:
        endpoints: 
          - http://asp-perf-lin:5001
      load:
        endpoints: 
          - http://asp-perf-load:5001
        options:
          displayOutput: true
  aspnet-perf-win:
    variables:
      serverAddress: 10.0.0.110
      downstreamAddress: 10.0.0.104
      downstreamPort: 8081
      cores: 12
    jobs:
      downstream:
        endpoints: 
          - http://asp-perf-load:5001
      application:
        endpoints: 
          - http://asp-perf-win:5001
      load:
        endpoints: 
          - http://asp-perf-db:5001
        options:
  aspnet-citrine-lin:
    variables:
      serverAddress: 10.0.0.102
      downstreamAddress: 10.0.0.103
      downstreamPort: 8081
      cores: 28
    jobs: 
      downstream:
        endpoints: 
          - http://asp-citrine-db:5001
      application:
        endpoints: 
          - http://asp-citrine-lin:5001
      load:
        endpoints: 
          - http://asp-citrine-load:5001
  aspnet-citrine-win:
    variables:
      serverAddress: 10.0.0.104
      downstreamAddress: 10.0.0.105
      downstreamPort: 8081
      cores: 28
    jobs: 
      downstream:
        endpoints: 
          - http://asp-citrine-load:5001
      application:
        endpoints: 
          - http://asp-citrine-win:5001
      load:
        endpoints: 
          - http://asp-citrine-db:5001
  local:
    variables:
      serverAddress: localhost
      serverPort: 8080
      downstreamAddress: localhost
      downstreamPort: 8081
    jobs: 
      downstream:
        endpoints: 
          - http://localhost:5010
      application:
        endpoints: 
          - http://localhost:5010
      load:
        endpoints: 
          - http://localhost:5010
